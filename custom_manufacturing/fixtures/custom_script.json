[
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Quotation",
  "modified": "2018-09-05 14:38:58.856217",
  "name": "Quotation-Client",
  "script": "frappe.ui.form.on(\"Quotation\", \"refresh\", function(frm) {\n\t//hide dashboard\n\tfrm.dashboard.hide();\n\t\n\t//hide button 'get items from -> Lead'. ??? Not working?\n\tcur_frm.page.get_inner_group_button(__(\"Get items from\")).find(\"button\").addClass('hide');\n\tcur_frm.remove_custom_button(__(\"Get items from\"));\n\t\n\t//allow for joined_items only the same quotation items and with the same master_item:\n\tfrm.fields_dict['items'].grid.get_field('joined_item').get_query = function(frm, cdt, cdn) {\n\t\tvar child = locals[cdt][cdn];\n\t\treturn{\n\t\t\tfilters: {\n\t\t\t\t'parent': child.parent,\n\t\t\t\t'master_item': child.master_item,\n\t\t\t}\n\t\t}\n\t},\n\t//show only boms of choosen item:\n\tfrm.fields_dict['master_bom'].grid.get_field('bom').get_query = function(frm, cdt, cdn) {\n\t\tvar child = locals[cdt][cdn];\n\t\treturn{\n\t\t\tfilters: {\n\t\t\t\t'item': child.item,\n\t\t\t\t'type':[\"=\", \"Register\"]\n\t\t\t}\n\t\t}\n\t}\n\t//show only items that are products:\n\tfrm.fields_dict['master_bom'].grid.get_field('item').get_query= function(doc, cdt, cdn) {\n\t\treturn{\n\t\t\tfilters:[\n\t\t\t\t['Item', 'item_group', 'in', ['Products']]\n\t\t\t]\n\t\t}\n\t}\n});\n\n//read (append) items from BOM into Quotation Items:\nfrappe.ui.form.on(\"Quotation Master BOM\", {\n \"get_items\" : function(cur_frm, cdt, cdn) {\n\t\t//console.log(frm);\n\t\t//console.log(cdn);\n\t\t//console.log(cdt);\n\t\tcur_frm.doc.last_master_bom_get_items = cdn;\n\t\t//cur_frm.set_value(last_master_bom_get_items, \"cdn\");\n\t\t//console.log(cur_frm);\n\t\t\n\t\tvar bom_name = cur_frm.fields_dict['master_bom'].grid.grid_rows_by_docname[cdn].doc.bom;\n\t\tvar master_qty = cur_frm.fields_dict['master_bom'].grid.grid_rows_by_docname[cdn].doc.qty;\n\t\tif(bom_name && master_qty){\n\t\t\terpnext.utils.map_current_doc({\n\t\t\t\tmethod: \"custom_manufacturing.utils.make_quotation_from_bom\",\n\t\t\t\tsource_name: bom_name\n\t\t\t\t//source_doctype: \"BOM\",\n\t\t\t\t//target: cur_frm.doc,\n\t\t\t\t//date_field: \"posting_date\",\n\t\t\t\t//setters: {\n\t\t\t\t//\titem: 'Jumts - M\u0101ja' || undefined,\n\t\t\t\t//},\n\t\t\t\t//get_query_filters: {\n\t\t\t\t//\tdocstatus: 1\n\t\t\t\t//}\n\t\t\t}),\n\t\t\tcur_frm.save();\n\t\t}else{\n\t\t\tfrappe.msgprint(__('No BOM or qty'));\n\t\t}\n\t},\n\t\"color_picker\" : function(cur_frm, cdt, cdn) {\n\t}\n});\n\nfrappe.ui.form.on(\"Quotation\", {\n\trefresh: function(frm) {\n\t\t\tfrm.add_custom_button(__('BOM'), function() {\n\t\t\t\terpnext.utils.map_current_doc({\n\t\t\t\t\tmethod: \"custom_manufacturing.utils.make_quotation_from_bom\",\n\t\t\t\t\tsource_doctype: \"BOM\",\n\t\t\t\t\ttarget: frm,\n\t\t\t\t\tdate_field: \"posting_date\",\n\t\t\t\t\tsetters: {\n\t\t\t\t\t\tproject: frm.doc.project || undefined,\n\t\t\t\t\t},\n\t\t\t\t\tget_query_filters: {\n\t\t\t\t\t\tdocstatus: 1\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}, __(\"Get Items From\"));\n\t}, \n});\n\n//calculate external markups:\nfrappe.ui.form.on(\"Quotation\", \"refresh\", function(frm) { //, cdt, cdn\n\t//get embedded_in values for quotation's country (do it once not for each Quotation Item)\n\t//use Promise to have data in client before doing anything else:\n\tnew Promise(resolve => frappe.call({\n\t    method: 'frappe.client.get_list',\n\t    args: {\n\t        'doctype': 'Embedded In Percent By Country',\n\t        'filters': {'country': 'Sweden'},\n\t        'fields': [\n\t            'material_embedded_in_type',\n\t            'percent',\n\t        ]\n\t    },\n\t\tcallback: resolve\n\t})).then(r => {\n\t\tvar embedded_in_values  = r.message;\n\t\tconsole.log('embedded_in_values');\n\t\tconsole.log(embedded_in_values);\n\t\t//color rows in master table and item table; color name is saved into items or master items doctype field 'color_picker'\n\t\t$.each(cur_frm.doc.master_bom || [], function(i, b) {\t\n\t\t\t\t$(\"div[data-name='\"+b.name+\"']\").find('div.data-row > div.grid-static-col').css({'background-color': b.color_picker});\n\t\t});\n\t\n\t\t//calc for each 'Quoatation Item' markups:\n\t\t$.each(cur_frm.doc.items || [], function(i, d) {\n\n\t\t\t\t$(\"div[data-name='\"+d.name+\"']\").find('div.data-row > div.grid-static-col').css({'background-color': d.color_picker});\n\t\t\n\t\t\t\t//unset margin rate??!!!\n\t\t\t\t//frappe.model.set_value(d.doctype, d.name, \"margin_rate_or_amount\", \"0.00\");\n\n\t\t\t\tvar rate = d.price_list_rate;\n\t\t\t\t//if is set material_embedded_in - R, R/O, O, R, D... then get its default percent value:\n\t\t\t\tif(d.material_embedded_in && embedded_in_values){\n\n\t\t\t\t\tvar material_embedded_in_markup_percent= $.grep(embedded_in_values, function (embedded) { return embedded.material_embedded_in_type == d.material_embedded_in })[0]['percent'];\n\t\t\t\t\tconsole.log('material_embedded_in_markup_percent:');\n\t\t\t\t\tconsole.log(material_embedded_in_markup_percent);\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\td.material_embedded_in_markup = material_embedded_in_markup_percent;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(d.material_embedded_in_markup){\n\t\t\t\t\tvar material_embedded_in_markup = 0.00;\n\t\t\t\t\tmaterial_embedded_in_markup = flt(d.material_embedded_in_markup)/100 * flt(rate) - flt(rate);\n\t\t\t\t\tmaterial_embedded_in_markup = material_embedded_in_markup.toFixed(2);\n\t\t\t\t\tfrappe.model.set_value(d.doctype, d.name, \"material_embedded_in_markup_amount\", material_embedded_in_markup);\n\t\t\t\t}\n\t\t\t\tif(d.factory_markup){\t\n\t\t\t\t\tvar factory_markup = 0.00;\t\t\n\t\t\t\t\tfactory_markup = flt(d.factory_markup)/100 * flt(rate) - flt(rate);\n\t\t\t\t\tfactory_markup = factory_markup.toFixed(2);\n\t\t\t\t\tfrappe.model.set_value(d.doctype, d.name, \"factory_markup_amount\", factory_markup);\n\t\t\t\t}\n\n\t\t\t\tif(d.construction_markup){\n\t\t\t\t\tvar construction_markup = 0.00;\t\t\n\t\t\t\t\tconstruction_markup = flt(d.construction_markup)/100 * flt(rate) - flt(rate);\n\t\t\t\t\tconstruction_markup = construction_markup.toFixed(2);\n\t\t\t\t\tfrappe.model.set_value(d.doctype, d.name, \"construction_markup_amount\", construction_markup);\n\t\t\t\t}\n\n\t\t\t\tif(d.delivery_markup){\n\t\t\t\t\tvar delivery_markup = 0.00;\n\t\t\t\t\tdelivery_markup = flt(d.delivery_markup)/100 * flt(rate) - flt(rate);\n\t\t\t\t\tdelivery_markup = delivery_markup.toFixed(2);\n\t\t\t\t\tfrappe.model.set_value(d.doctype, d.name, \"delivery_markup_amount\", delivery_markup);\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar markup_rate = flt(material_embedded_in_markup) + flt(factory_markup) + flt(construction_markup) + flt(delivery_markup);\n\t\t\t\t/*\n\t\t\t\tconsole.log(\"material_embedded_in_markup: \"+material_embedded_in_markup);\n\t\t\t\tconsole.log(\"factory_markup: \"+factory_markup);\n\t\t\t\tconsole.log(\"construction_markup: \"+construction_markup);\n\t\t\t\tconsole.log(\"delivery_markup: \"+delivery_markup);\n\n\t\t\t\tconsole.log(\"rate before: \" + rate);\t\t\t\n\t\t\t\tconsole.log(\"marku rate after: \"+markup_rate);\t\n\t\t\t\t*/\t\n\t\t\t\t//!!!! uncoment to set it in doc frappe.model.set_value(d.doctype, d.name, \"margin_type\", \"Amount\");\n\t\t\t\t//!!!! uncoment to set it in doc frappe.model.set_value(d.doctype, d.name, \"margin_rate_or_amount\", markup_rate);\n\t\t\t\t//console.log(\"rate after in reality: \"+d.rate);\t\t\t\n\t\t\t\t//console.log(material_embedded_in_markup);\n\t\t\t\t//console.log(rate);\n\t\t});\t//end of calc for each 'Quoatation Item' markups\n\t}); //end of Promise then\t\n})\n\n//create 'production' BOMs from quoatations:\nfrappe.ui.form.on(\"Quotation\", \"create_boms\", function(frm, cdt, cdn) {\n\tconsole.log(\"Quotation creating boms2\");\n\tfrappe.call({\n\t\t\tmethod: \"custom_manufacturing.utils.make_boms_from_quotations\",\n\t\t\targs: { \n\t\t\t\t\"quotation\": cur_frm.doc.name, \n\t\t\t},\n\t\t\tcallback: function(r) {\n\t\t\t\tconsole.log(r);\n\t\t\t}\n\t\t});\n\t\t\n\n});\n\n/* Not working if childtable childtable? https://discuss.erpnext.com/t/not-able-to-update-value-in-child-table-solved/16590/9\nfrappe.ui.form.on('Quotation Item', 'joined_item', function(frm, cdt, cdn){\n    console.log('inside q item');\n    var child = locals[cdt][cdn];\n\tconsole.log(child.joined_item);\n\t\n    frappe.call({\n        'method': 'frappe.client.get_value',\n        'args': {\n            'doctype': 'Item',\n\t\t\tfilters: {\n\t\t\t\t'item_code': child.joined_item,\n\t\t\t},\n           'fieldname':'name'\n        },\n        'callback': function(res){\n\t\tconsole.log(res);\n\t\tconsole.log(cdt);\n\t\tconsole.log(cdn);\n            frappe.mode.set_value('Quotation Item','QUOD/00417', 'joined_item_name', '1111');\n        }\n    });\n\t\n});\n*/\n\ncur_frm.add_fetch(\"joined_item\", \"item_code\", \"joined_item_name\");",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Quotation Item",
  "modified": "2018-07-13 17:56:34.621795",
  "name": "Quotation Item-Client",
  "script": "//cur_frm.add_fetch(\"joined_item\", \"item_code\", \"joined_item_name\");\nfrappe.ui.form.on('Quotation Item', 'joined_item', function(frm, cdt, cdn){\n    console.log('inside q item');\n    frappe.call({\n        'method': 'frappe.client.get_value',\n        'args': {\n            'doctype': 'Item',\n            'filters': [\n                ['Item', 'item_code', '=', locals[cdt][cdn].joined_item]\n            ],\n           'fieldname':'name'\n        },\n        'callback': function(res){\n            frappe.mode.set_value(cdt, cdn, 'joined_item_name', res.message.name);\n        }\n    });\n});",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Project Offer",
  "modified": "2018-08-21 14:54:08.480486",
  "name": "Project Offer-Client",
  "script": "cur_frm.add_fetch(\"agent\", \"employee_name\", \"agent_full_name\");\ncur_frm.add_fetch(\"agent\", \"cell_number\", \"agent_phone\");\ncur_frm.add_fetch(\"agent\", \"company_email\", \"agent_email\");\ncur_frm.add_fetch(\"agent\", \"current_address\", \"agent_city_country\");\n\n\n",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "BOM",
  "modified": "2018-09-11 15:31:25.400657",
  "name": "BOM-Client",
  "script": "frappe.ui.form.on(\"BOM Item\", \n\t\"item_code\", function(frm, cdt, cdn) {\n\t\tvar d = frappe.model.get_doc(cdt, cdn);\n\t\t//cur_frm.doc.set_value(\"original_item\", cur_frm.doc.item_code);\n\t\tfrappe.model.set_value(cdt, cdn, \"original_item\", d.item_code);\n\t},\n\n);\n\nfrappe.ui.form.on(\"BOM\", \n\t\"refresh\", function(frm) {\n \t\tcur_frm.clear_custom_buttons();\n\t\t$.each(cur_frm.doc.items || [], function(i, d) {\n\t\t\tfrappe.model.set_value(d.doctype, d.name, \"original_item\", d.item_code);\n\t\t\t//var qty = ((d.reserve_factor)/100 +1) * d.volume_factor *d.base_qty; //in case if base_qty needed for each item not master item qty\n\t\t\tvar qty = ((d.reserve_factor)/100 +1) * d.volume_factor *cur_frm.doc.quantity;\n\t\t\tfrappe.model.set_value(d.doctype, d.name, \"qty\", qty);\n\t\t});\n\t\tvar total_cost_per_unit = (cur_frm.doc.total_cost/cur_frm.doc.quantity);\n\t\tconsole.log(total_cost_per_unit);\n\t\tcur_frm.set_value(\"total_cost_per_unit\", total_cost_per_unit);\n\t},\n\t/*\n\t\"quantity\", function(frm) {\n\t\t$.each(cur_frm.doc.items || [], function(i, d) {\n\t\t\tfrappe.model.set_value(d.doctype, d.name, \"base_qty\", cur_frm.doc.quantity;);\n\t\t});\t\t\n\t}\n\t*/\t\n);\n\nfrappe.ui.form.on(\"BOM Item\", \"switch_to_alternative_item\", function(frm, cdt, cdn) {\n\tvar d = locals[cdt][cdn]\n\tcur_frm.select_workline_alternate_item({\n\t\tcurrent_item_selection: d.item_code,\n\t\titem_code: d.original_item,\n\t\tbom: cur_frm.doc.bom_no,\n\t\trow: d\n\t})\n});\ncur_frm.select_workline_alternate_item = function(opts) {\n\t//console.log(opts);\n\t//}\n\tconst row = opts.row;\n\tconst current_item_selection = opts.current_item_selection;\n\tconst item_code = opts.item_code;\n\tconst bom = opts.bom;\n \tvar headers = [ __(\"Alternative Item\"), \"\" ]\n \tcur_frm.alt_list_data = [];\n\tcur_frm.render_alts_items = function(d, headers, data){\n\t\t// render table of BOM Alternative Items\n\t\td.fields_dict.alt_items.$wrapper.html(\n\t\t\tfrappe.render_template('alternative_items_selector',\n\t\t\t\t{'header_columns': headers, 'data': data}\n\t\t\t)\n\t\t)\n\t}\n\tconst d = new frappe.ui.Dialog({\n\t\ttitle: __(\"Select Alternate Items:\") + item_code,\n\t\tfields: [\n\t\t\t{\n\t\t\t\tfieldtype:'HTML',\n\t\t\t\tfieldname:\"alt_items\",\n\t\t\t\tlabel: __('Alternative Items'),\n\t\t\t}\n\t\t]\n\t});\n\t//get alternative items from db:\n \tfrappe.call({\n\t\tmethod: 'custom_manufacturing.utils.get_alternative_items',\n\t\tfreeze: true,\n\t\targs: {\n\t\t\titem_code: item_code\n\t\t},\n\t\tcallback:function(r){\n\t\t\tcur_frm.alt_list_data =  r.message || [];\n\t\t\tif (current_item_selection != item_code) {\n\t\t\t\tcur_frm.alt_list_data.push({\n\t\t\t\t\t'alt_item':item_code\n\t\t\t\t})\n\t\t\t}\n\t\t\tvar current_item_selection_idx = cur_frm.alt_list_data.findIndex(item => item.alt_item === current_item_selection)\n\t\t\tif (current_item_selection_idx != -1) {\n\t\t\t\tcur_frm.alt_list_data.splice(current_item_selection_idx, 1)\n\t\t\t}\n\t\t\tconsole.log(cur_frm.alt_list_data);\n\t\t\tcur_frm.render_alts_items(d, headers, cur_frm.alt_list_data)\n\t\t}\n\t})\n \tcur_frm.select_row = function(i){\n\t\tvar selected_item = cur_frm.alt_list_data[i].alt_item;\n\t\tfrappe.call({\n\t\t\tmethod: 'frappe.client.get',\n\t\t\targs: {\n\t\t\t\tdoctype:'Item',\n\t\t\t\tname: selected_item\n\t\t\t},\n\t\t\tcallback: function(r){\n\t\t\t\tfrappe.model.set_value(row.doctype, row.name, \"item_code\", r.message.item_code);\n\t\t\t\tfrappe.model.set_value(row.doctype, row.name, \"item_name\", r.message.item_name);\n\t\t\t\tfrappe.model.set_value(row.doctype, row.name, \"description\", r.message.description);\n\t\t\t}\n\t\t})\n\t\t\n \t\tfrappe.call({\n\t\t\t\"method\": \"erpnext.stock.utils.get_latest_stock_qty\",\n\t\t\targs: {\n\t\t\t\titem_code: selected_item,\n\t\t\t\twarehouse: row.source_warehouse\n\t\t\t},\n\t\t\tcallback: function (r) {\n\t\t\t\tfrappe.model.set_value(row.doctype, row.name,\n\t\t\t\t\t\"available_qty_at_source_warehouse\", r.message);\n\t\t\t}\n\t\t})\n\t\t\n \t\td.hide()\n\t}\n \td.show();\n}",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Item",
  "modified": "2018-09-12 17:09:41.345283",
  "name": "Item-Client",
  "script": "frappe.ui.form.on('Item', {\n\t\"parent_item\": function(frm) {\n\t\tif(!cur_frm.doc.parent_item){\n\t\t\tcur_frm.set_value(\"parent_item_name\", \"\");\n\t\t}\n\t\tif(cur_frm.doc.parent_item){\n\t\t\tcur_frm.set_value(\"is_group_parent_item\", \"\");\n\t\t}\t\t\n\t},\n\t\"is_group_parent_item\": function(frm) {\n\t\tif(cur_frm.doc.is_group_parent_item == 1){\n\t\t\tcur_frm.set_value(\"parent_item\", \"\");\n\t\t\tcur_frm.set_value(\"parent_item_name\", \"\");\n\t\t}\t\t\n\t},\n\trefresh: function(frm) {\n\n\t\t//for parent_item allow only these who are checked as parents\n\t\tcur_frm.set_query(\"parent_item\", function() {\n        \t\treturn {\n            \t\t\t\"filters\": {\n                \t\t\t\"is_group_parent_item\": 1\n            \t\t\t}\n        \t\t};\n   \t\t });\n\n\t\tif(!cur_frm.doc.__islocal){ //if is saved then do not show these fields\n\t\t\tcur_frm.set_df_property(\"naming_by\", \"hidden\", true);\n\t\t\tcur_frm.set_df_property(\"naming_series\", \"hidden\", true);\n\t\t\tcur_frm.set_df_property(\"item_code\", \"hidden\", true);\n\t\t}else{\n\t\t\tcur_frm.set_value(\"naming_series\", \"M.####\"); //set something for start;\n\t\t\tfrm.toggle_display(\"item_code\", frm.doc.naming_by == \"Manually By Item Code\");\n\t\t\tfrm.toggle_display(\"naming_series\", frm.doc.naming_by == \"Naming Series\");\n\t\t}\n\n\t\tcur_frm.remove_custom_button(__(\"View\"));\n\t\tcur_frm.remove_custom_button(__(\"Duplicate\"));\n\t\tfrm.add_custom_button(__(\"Add / Edit Item Alternatives\"), function() {\n\t\t\tfrappe.set_route(\"List\", \"Item Alternative\", {\"item_code\": frm.doc.name});\n\t\t});\n\t\tfrm.add_custom_button(__(\"Add / Edit Prices\"), function() {\n\t\t\tfrappe.set_route(\"List\", \"Item Price\", {\"item_code\": frm.doc.name});\n\t\t});\n\n\t},\n\t\"item_group\": function(frm) {\n\t\t//ToDo - add custom field 'prefix for item code' to Item Group and load it in New Item on item_group change\n\t\t/*\n\t\tif(frm.doc.item_group == __(\"Darbs\"))\n\t\t{\n\t\t\tfrm.doc.naming_by = __(\"Naming Series\");\n\t\t\t//cur_frm.set_value(\"naming_by\", __(\"Naming Series\"));\n\t\t\tcur_frm.set_value(\"naming_series\", \"D.####\");\n\t\t}\n\t\tif(frm.doc.item_group == __(\"Materi\u0101li\"))\n\t\t{\t\t\t\n\t\t\tfrm.doc.naming_by = __(\"Naming Series\");\n\t\t\tcur_frm.set_value(\"naming_series\", \"M.####\");\n\t\t}\n\t\t*/\n\t},\n\t\"naming_by\": function(frm) {\n\t\tfrm.toggle_display(\"item_code\", frm.doc.naming_by == \"Manually By Item Code\");\n\t\tfrm.toggle_display(\"naming_series\", frm.doc.naming_by == \"Naming Series\");\n\t},\n\t//function to allow only one parent-item per item group\n\t/* removed as new scheme with child-item was introduced\n\tvalidate: function(frm){\n\tif(frm.doc.is_group_parent_item){\n\tconsole.log('validating...');\n\tnew Promise(resolve => frappe.call({\n\t\ttype:\"GET\",\n\t\tmethod: \"custom_manufacturing.utils.check_is_set_item_group_parent_item\",\n\t\targs: {\n\t\t\t\"item_group\": frm.doc.item_group,\n\t\t\t\"item_code\": frm.doc.item_code\n\t\t},\n\t\tcallback: resolve\n\t})).then(r => {\n\t\tconsole.log(r.message);\n\t\tif(r.message){\n\t\t\tcur_frm.set_value(\"is_group_parent_item\", \"0\");\n\t\t\tfrappe.throw(__(\"Primary Item is already set: \") + r.message[0]['item_group'] + '/ '+r.message[0]['item_name'] + ' (<em>'+r.message[0]['item_code']+'</em>)')\n\t\t}\n\t\t//if(r.message) {\t\t\t\t\t\t\t\t\n\t\t//\t$.each(r.message, function(i, d) {\n\t\t//}\n\t})\n\t}\n\t},\n\t*/\n})\ncur_frm.add_fetch(\"parent_item\", \"item_name\", \"parent_item_name\");",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Customer",
  "modified": "2018-09-12 17:09:28.954259",
  "name": "Customer-Client",
  "script": "frappe.ui.form.on('Customer', {\n\trefresh: function(frm) {\n\t\tcur_frm.remove_custom_button(__(\"Accounting Ledger\"));\n\t\tcur_frm.remove_custom_button(__(\"Accounts Receivable\"));\n\t}\n})",
  "script_type": "Client"
 }
]