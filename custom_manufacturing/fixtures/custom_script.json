[
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Multi Doctype Tree Manager",
  "modified": "2018-09-10 15:41:34.471631",
  "name": "Multi Doctype Tree Manager-Client",
  "script": "frappe.ui.form.on('Multi Doctype Tree Manager', {\n\tbefore_save: function(frm) {\n\t\tif(cur_frm.doc.tree_level){\n\t\t\tcur_frm.set_value(\"naming_series\", cur_frm.doc.tree_level + \" - \" + cur_frm.doc.children_level);\n\t\t}else{\n\t\t\tfrappe.throw(__(\"Tree level field is mandatory!\"));\n\t\t}\n\t}\n});",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Quotation",
  "modified": "2018-09-05 14:38:58.856217",
  "name": "Quotation-Client",
  "script": "frappe.ui.form.on(\"Quotation\", \"refresh\", function(frm) {\n\t//hide dashboard\n\tfrm.dashboard.hide();\n\t\n\t//hide button 'get items from -> Lead'. ??? Not working?\n\tcur_frm.page.get_inner_group_button(__(\"Get items from\")).find(\"button\").addClass('hide');\n\tcur_frm.remove_custom_button(__(\"Get items from\"));\n\t\n\t//allow for joined_items only the same quotation items and with the same master_item:\n\tfrm.fields_dict['items'].grid.get_field('joined_item').get_query = function(frm, cdt, cdn) {\n\t\tvar child = locals[cdt][cdn];\n\t\treturn{\n\t\t\tfilters: {\n\t\t\t\t'parent': child.parent,\n\t\t\t\t'master_item': child.master_item,\n\t\t\t}\n\t\t}\n\t},\n\t//show only boms of choosen item:\n\tfrm.fields_dict['master_bom'].grid.get_field('bom').get_query = function(frm, cdt, cdn) {\n\t\tvar child = locals[cdt][cdn];\n\t\treturn{\n\t\t\tfilters: {\n\t\t\t\t'item': child.item,\n\t\t\t\t'type':[\"=\", \"Register\"]\n\t\t\t}\n\t\t}\n\t}\n\t//show only items that are products:\n\tfrm.fields_dict['master_bom'].grid.get_field('item').get_query= function(doc, cdt, cdn) {\n\t\treturn{\n\t\t\tfilters:[\n\t\t\t\t['Item', 'item_group', 'in', ['Products']]\n\t\t\t]\n\t\t}\n\t}\n});\n\n//read (append) items from BOM into Quotation Items:\nfrappe.ui.form.on(\"Quotation Master BOM\", {\n \"get_items\" : function(cur_frm, cdt, cdn) {\n\t\t//console.log(frm);\n\t\t//console.log(cdn);\n\t\t//console.log(cdt);\n\t\tcur_frm.doc.last_master_bom_get_items = cdn;\n\t\t//cur_frm.set_value(last_master_bom_get_items, \"cdn\");\n\t\t//console.log(cur_frm);\n\t\t\n\t\tvar bom_name = cur_frm.fields_dict['master_bom'].grid.grid_rows_by_docname[cdn].doc.bom;\n\t\tvar master_qty = cur_frm.fields_dict['master_bom'].grid.grid_rows_by_docname[cdn].doc.qty;\n\t\tif(bom_name && master_qty){\n\t\t\terpnext.utils.map_current_doc({\n\t\t\t\tmethod: \"custom_manufacturing.utils.make_quotation_from_bom\",\n\t\t\t\tsource_name: bom_name\n\t\t\t\t//source_doctype: \"BOM\",\n\t\t\t\t//target: cur_frm.doc,\n\t\t\t\t//date_field: \"posting_date\",\n\t\t\t\t//setters: {\n\t\t\t\t//\titem: 'Jumts - M\u0101ja' || undefined,\n\t\t\t\t//},\n\t\t\t\t//get_query_filters: {\n\t\t\t\t//\tdocstatus: 1\n\t\t\t\t//}\n\t\t\t}),\n\t\t\tcur_frm.save();\n\t\t}else{\n\t\t\tfrappe.msgprint(__('No BOM or qty'));\n\t\t}\n\t},\n\t\"color_picker\" : function(cur_frm, cdt, cdn) {\n\t}\n});\n\nfrappe.ui.form.on(\"Quotation\", {\n\trefresh: function(frm) {\n\t\t\tfrm.add_custom_button(__('BOM'), function() {\n\t\t\t\terpnext.utils.map_current_doc({\n\t\t\t\t\tmethod: \"custom_manufacturing.utils.make_quotation_from_bom\",\n\t\t\t\t\tsource_doctype: \"BOM\",\n\t\t\t\t\ttarget: frm,\n\t\t\t\t\tdate_field: \"posting_date\",\n\t\t\t\t\tsetters: {\n\t\t\t\t\t\tproject: frm.doc.project || undefined,\n\t\t\t\t\t},\n\t\t\t\t\tget_query_filters: {\n\t\t\t\t\t\tdocstatus: 1\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}, __(\"Get Items From\"));\n\t}, \n});\n\n//calculate external markups:\nfrappe.ui.form.on(\"Quotation\", \"refresh\", function(frm) { //, cdt, cdn\n\t//get embedded_in values for quotation's country (do it once not for each Quotation Item)\n\t//use Promise to have data in client before doing anything else:\n\tnew Promise(resolve => frappe.call({\n\t    method: 'frappe.client.get_list',\n\t    args: {\n\t        'doctype': 'Embedded In Percent By Country',\n\t        'filters': {'country': 'Sweden'},\n\t        'fields': [\n\t            'material_embedded_in_type',\n\t            'percent',\n\t        ]\n\t    },\n\t\tcallback: resolve\n\t})).then(r => {\n\t\tvar embedded_in_values  = r.message;\n\t\tconsole.log('embedded_in_values');\n\t\tconsole.log(embedded_in_values);\n\t\t//color rows in master table and item table; color name is saved into items or master items doctype field 'color_picker'\n\t\t$.each(cur_frm.doc.master_bom || [], function(i, b) {\t\n\t\t\t\t$(\"div[data-name='\"+b.name+\"']\").find('div.data-row > div.grid-static-col').css({'background-color': b.color_picker});\n\t\t});\n\t\n\t\t//calc for each 'Quoatation Item' markups:\n\t\t$.each(cur_frm.doc.items || [], function(i, d) {\n\n\t\t\t\t$(\"div[data-name='\"+d.name+\"']\").find('div.data-row > div.grid-static-col').css({'background-color': d.color_picker});\n\t\t\n\t\t\t\t//unset margin rate??!!!\n\t\t\t\t//frappe.model.set_value(d.doctype, d.name, \"margin_rate_or_amount\", \"0.00\");\n\n\t\t\t\tvar rate = d.price_list_rate;\n\t\t\t\t//if is set material_embedded_in - R, R/O, O, R, D... then get its default percent value:\n\t\t\t\tif(d.material_embedded_in && embedded_in_values){\n\n\t\t\t\t\tvar material_embedded_in_markup_percent= $.grep(embedded_in_values, function (embedded) { return embedded.material_embedded_in_type == d.material_embedded_in })[0]['percent'];\n\t\t\t\t\tconsole.log('material_embedded_in_markup_percent:');\n\t\t\t\t\tconsole.log(material_embedded_in_markup_percent);\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\td.material_embedded_in_markup = material_embedded_in_markup_percent;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(d.material_embedded_in_markup){\n\t\t\t\t\tvar material_embedded_in_markup = 0.00;\n\t\t\t\t\tmaterial_embedded_in_markup = flt(d.material_embedded_in_markup)/100 * flt(rate) - flt(rate);\n\t\t\t\t\tmaterial_embedded_in_markup = material_embedded_in_markup.toFixed(2);\n\t\t\t\t\tfrappe.model.set_value(d.doctype, d.name, \"material_embedded_in_markup_amount\", material_embedded_in_markup);\n\t\t\t\t}\n\t\t\t\tif(d.factory_markup){\t\n\t\t\t\t\tvar factory_markup = 0.00;\t\t\n\t\t\t\t\tfactory_markup = flt(d.factory_markup)/100 * flt(rate) - flt(rate);\n\t\t\t\t\tfactory_markup = factory_markup.toFixed(2);\n\t\t\t\t\tfrappe.model.set_value(d.doctype, d.name, \"factory_markup_amount\", factory_markup);\n\t\t\t\t}\n\n\t\t\t\tif(d.construction_markup){\n\t\t\t\t\tvar construction_markup = 0.00;\t\t\n\t\t\t\t\tconstruction_markup = flt(d.construction_markup)/100 * flt(rate) - flt(rate);\n\t\t\t\t\tconstruction_markup = construction_markup.toFixed(2);\n\t\t\t\t\tfrappe.model.set_value(d.doctype, d.name, \"construction_markup_amount\", construction_markup);\n\t\t\t\t}\n\n\t\t\t\tif(d.delivery_markup){\n\t\t\t\t\tvar delivery_markup = 0.00;\n\t\t\t\t\tdelivery_markup = flt(d.delivery_markup)/100 * flt(rate) - flt(rate);\n\t\t\t\t\tdelivery_markup = delivery_markup.toFixed(2);\n\t\t\t\t\tfrappe.model.set_value(d.doctype, d.name, \"delivery_markup_amount\", delivery_markup);\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar markup_rate = flt(material_embedded_in_markup) + flt(factory_markup) + flt(construction_markup) + flt(delivery_markup);\n\t\t\t\t/*\n\t\t\t\tconsole.log(\"material_embedded_in_markup: \"+material_embedded_in_markup);\n\t\t\t\tconsole.log(\"factory_markup: \"+factory_markup);\n\t\t\t\tconsole.log(\"construction_markup: \"+construction_markup);\n\t\t\t\tconsole.log(\"delivery_markup: \"+delivery_markup);\n\n\t\t\t\tconsole.log(\"rate before: \" + rate);\t\t\t\n\t\t\t\tconsole.log(\"marku rate after: \"+markup_rate);\t\n\t\t\t\t*/\t\n\t\t\t\t//!!!! uncoment to set it in doc frappe.model.set_value(d.doctype, d.name, \"margin_type\", \"Amount\");\n\t\t\t\t//!!!! uncoment to set it in doc frappe.model.set_value(d.doctype, d.name, \"margin_rate_or_amount\", markup_rate);\n\t\t\t\t//console.log(\"rate after in reality: \"+d.rate);\t\t\t\n\t\t\t\t//console.log(material_embedded_in_markup);\n\t\t\t\t//console.log(rate);\n\t\t});\t//end of calc for each 'Quoatation Item' markups\n\t}); //end of Promise then\t\n})\n\n//create 'production' BOMs from quoatations:\nfrappe.ui.form.on(\"Quotation\", \"create_boms\", function(frm, cdt, cdn) {\n\tconsole.log(\"Quotation creating boms2\");\n\tfrappe.call({\n\t\t\tmethod: \"custom_manufacturing.utils.make_boms_from_quotations\",\n\t\t\targs: { \n\t\t\t\t\"quotation\": cur_frm.doc.name, \n\t\t\t},\n\t\t\tcallback: function(r) {\n\t\t\t\tconsole.log(r);\n\t\t\t}\n\t\t});\n\t\t\n\n});\n\n/* Not working if childtable childtable? https://discuss.erpnext.com/t/not-able-to-update-value-in-child-table-solved/16590/9\nfrappe.ui.form.on('Quotation Item', 'joined_item', function(frm, cdt, cdn){\n    console.log('inside q item');\n    var child = locals[cdt][cdn];\n\tconsole.log(child.joined_item);\n\t\n    frappe.call({\n        'method': 'frappe.client.get_value',\n        'args': {\n            'doctype': 'Item',\n\t\t\tfilters: {\n\t\t\t\t'item_code': child.joined_item,\n\t\t\t},\n           'fieldname':'name'\n        },\n        'callback': function(res){\n\t\tconsole.log(res);\n\t\tconsole.log(cdt);\n\t\tconsole.log(cdn);\n            frappe.mode.set_value('Quotation Item','QUOD/00417', 'joined_item_name', '1111');\n        }\n    });\n\t\n});\n*/\n\ncur_frm.add_fetch(\"joined_item\", \"item_code\", \"joined_item_name\");",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Quotation Item",
  "modified": "2018-07-13 17:56:34.621795",
  "name": "Quotation Item-Client",
  "script": "//cur_frm.add_fetch(\"joined_item\", \"item_code\", \"joined_item_name\");\nfrappe.ui.form.on('Quotation Item', 'joined_item', function(frm, cdt, cdn){\n    console.log('inside q item');\n    frappe.call({\n        'method': 'frappe.client.get_value',\n        'args': {\n            'doctype': 'Item',\n            'filters': [\n                ['Item', 'item_code', '=', locals[cdt][cdn].joined_item]\n            ],\n           'fieldname':'name'\n        },\n        'callback': function(res){\n            frappe.mode.set_value(cdt, cdn, 'joined_item_name', res.message.name);\n        }\n    });\n});",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Project Offer",
  "modified": "2018-08-21 14:54:08.480486",
  "name": "Project Offer-Client",
  "script": "cur_frm.add_fetch(\"agent\", \"employee_name\", \"agent_full_name\");\ncur_frm.add_fetch(\"agent\", \"cell_number\", \"agent_phone\");\ncur_frm.add_fetch(\"agent\", \"company_email\", \"agent_email\");\ncur_frm.add_fetch(\"agent\", \"current_address\", \"agent_city_country\");\n\n\n",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "BOM",
  "modified": "2018-09-13 11:57:53.623137",
  "name": "BOM-Client",
  "script": "frappe.ui.form.on(\"BOM Item\", \n\t\"item_code\", function(frm, cdt, cdn) {\n\t\tvar d = frappe.model.get_doc(cdt, cdn);\n\t\t//cur_frm.doc.set_value(\"original_item\", cur_frm.doc.item_code);\n\t\tfrappe.model.set_value(cdt, cdn, \"original_item\", d.item_code);\n\t},\n\n);\n\nfrappe.ui.form.on(\"BOM\", \n\t\"refresh\", function(frm) {\n \t\tcur_frm.clear_custom_buttons();\n\t\t$.each(cur_frm.doc.items || [], function(i, d) {\n\t\t\tfrappe.model.set_value(d.doctype, d.name, \"original_item\", d.item_code);\n\t\t\tvar qty = ((d.reserve_factor)/100 +1) * d.volume_factor *d.base_qty; //in case if base_qty needed for each item not master item qty\n\t\t\t//var qty = ((d.reserve_factor)/100 +1) * d.volume_factor *cur_frm.doc.quantity;\n\t\t\tfrappe.model.set_value(d.doctype, d.name, \"qty\", qty);\n\t\t});\n\t\tvar total_cost_per_unit = (cur_frm.doc.total_cost/cur_frm.doc.quantity);\n\t\tconsole.log(total_cost_per_unit);\n\t\tcur_frm.set_value(\"total_cost_per_unit\", total_cost_per_unit);\n\t},\n\t/* temp: what happens when BOM master quantity is changed?\n\t\"quantity\", function(frm) {\n\t\t$.each(cur_frm.doc.items || [], function(i, d) {\n\t\t\tfrappe.model.set_value(d.doctype, d.name, \"base_qty\", cur_frm.doc.quantity;);\n\t\t});\t\t\n\t}\n\t*/\t\n);\n\nfrappe.ui.form.on(\"BOM Item\", \"switch_to_alternative_item\", function(frm, cdt, cdn) {\n\tvar d = locals[cdt][cdn]\n\tcur_frm.select_workline_alternate_item({\n\t\tcurrent_item_selection: d.item_code,\n\t\titem_code: d.original_item,\n\t\tbom: cur_frm.doc.bom_no,\n\t\trow: d\n\t})\n});\ncur_frm.select_workline_alternate_item = function(opts) {\n\t//console.log(opts);\n\t//}\n\tconst row = opts.row;\n\tconst current_item_selection = opts.current_item_selection;\n\tconst item_code = opts.item_code;\n\tconst bom = opts.bom;\n \tvar headers = [ __(\"Alternative Item\"), \"\" ]\n \tcur_frm.alt_list_data = [];\n\tcur_frm.render_alts_items = function(d, headers, data){\n\t\t// render table of BOM Alternative Items\n\t\td.fields_dict.alt_items.$wrapper.html(\n\t\t\tfrappe.render_template('alternative_items_selector',\n\t\t\t\t{'header_columns': headers, 'data': data}\n\t\t\t)\n\t\t)\n\t}\n\tconst d = new frappe.ui.Dialog({\n\t\ttitle: __(\"Select Alternate Items:\") + item_code,\n\t\tfields: [\n\t\t\t{\n\t\t\t\tfieldtype:'HTML',\n\t\t\t\tfieldname:\"alt_items\",\n\t\t\t\tlabel: __('Alternative Items'),\n\t\t\t}\n\t\t]\n\t});\n\t//get alternative items from db:\n \tfrappe.call({\n\t\tmethod: 'custom_manufacturing.utils.get_alternative_items',\n\t\tfreeze: true,\n\t\targs: {\n\t\t\titem_code: item_code\n\t\t},\n\t\tcallback:function(r){\n\t\t\tcur_frm.alt_list_data =  r.message || [];\n\t\t\tif (current_item_selection != item_code) {\n\t\t\t\tcur_frm.alt_list_data.push({\n\t\t\t\t\t'alt_item':item_code\n\t\t\t\t})\n\t\t\t}\n\t\t\tvar current_item_selection_idx = cur_frm.alt_list_data.findIndex(item => item.alt_item === current_item_selection)\n\t\t\tif (current_item_selection_idx != -1) {\n\t\t\t\tcur_frm.alt_list_data.splice(current_item_selection_idx, 1)\n\t\t\t}\n\t\t\tconsole.log(cur_frm.alt_list_data);\n\t\t\tcur_frm.render_alts_items(d, headers, cur_frm.alt_list_data)\n\t\t}\n\t})\n \tcur_frm.select_row = function(i){\n\t\tvar selected_item = cur_frm.alt_list_data[i].alt_item;\n\t\tfrappe.call({\n\t\t\tmethod: 'frappe.client.get',\n\t\t\targs: {\n\t\t\t\tdoctype:'Item',\n\t\t\t\tname: selected_item\n\t\t\t},\n\t\t\tcallback: function(r){\n\t\t\t\tfrappe.model.set_value(row.doctype, row.name, \"item_code\", r.message.item_code);\n\t\t\t\tfrappe.model.set_value(row.doctype, row.name, \"item_name\", r.message.item_name);\n\t\t\t\tfrappe.model.set_value(row.doctype, row.name, \"description\", r.message.description);\n\t\t\t}\n\t\t})\n\t\t\n \t\tfrappe.call({\n\t\t\t\"method\": \"erpnext.stock.utils.get_latest_stock_qty\",\n\t\t\targs: {\n\t\t\t\titem_code: selected_item,\n\t\t\t\twarehouse: row.source_warehouse\n\t\t\t},\n\t\t\tcallback: function (r) {\n\t\t\t\tfrappe.model.set_value(row.doctype, row.name,\n\t\t\t\t\t\"available_qty_at_source_warehouse\", r.message);\n\t\t\t}\n\t\t})\n\t\t\n \t\td.hide()\n\t}\n \td.show();\n}",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Item",
  "modified": "2019-03-21 15:35:02.455390",
  "name": "Item-Client",
  "script": "frappe.ui.form.on('Item', {\n\t\"parent_item\": function(frm) {\n\t\tif(!cur_frm.doc.parent_item){\n\t\t\tcur_frm.set_value(\"parent_item_name\", \"\");\n\t\t}\n\t\tif(cur_frm.doc.parent_item){\n\t\t\tcur_frm.set_value(\"is_group_parent_item\", \"\");\n\t\t}\t\t\n\t},\n\t\"is_group_parent_item\": function(frm) {\n\t\tif(cur_frm.doc.is_group_parent_item == 1){\n\t\t\tcur_frm.set_value(\"parent_item\", \"\");\n\t\t\tcur_frm.set_value(\"parent_item_name\", \"\");\n\t\t}\t\t\n\t},\n\trefresh: function(frm) {\n\n\t\t//for parent_item allow only these who are checked as parents\n\t\tcur_frm.set_query(\"parent_item\", function() {\n        \t\treturn {\n            \t\t\t\"filters\": {\n                \t\t\t\"is_group_parent_item\": 1\n            \t\t\t}\n        \t\t};\n   \t\t });\n\n\t\tif(!cur_frm.doc.__islocal){ //if is saved then do not show these fields\n\t\t\tcur_frm.set_df_property(\"naming_by\", \"hidden\", true);\n\t\t\tcur_frm.set_df_property(\"naming_series\", \"hidden\", true);\n\t\t\tcur_frm.set_df_property(\"item_code\", \"hidden\", true);\n\t\t}else{\n\t\t\tcur_frm.set_value(\"naming_series\", \"M.####\"); //set something for start;\n\t\t\tfrm.toggle_display(\"item_code\", frm.doc.naming_by == \"Manually By Item Code\");\n\t\t\tfrm.toggle_display(\"naming_series\", frm.doc.naming_by == \"Naming Series\");\n\t\t}\n\n\t\tcur_frm.remove_custom_button(__(\"View\"));\n\t\tcur_frm.remove_custom_button(__(\"Duplicate\"));\n\t\tfrm.add_custom_button(__(\"Add / Edit Item Alternatives\"), function() {\n\t\t\tfrappe.set_route(\"List\", \"Item Alternative\", {\"item_code\": frm.doc.name});\n\t\t});\n\t\tfrm.add_custom_button(__(\"Add / Edit Prices\"), function() {\n\t\t\tfrappe.set_route(\"List\", \"Item Price\", {\"item_code\": frm.doc.name});\n\t\t});\n\t\t\n\t\t//style prices\n\t\t//Not working! Malfunctioning - 'copies' style on navigating between Items, but not reloadinf corectly for each opened Item's Form\n\t\t/*\n\t\t$.each(cur_frm.doc.prices || [], function(i, d) {\n\t\t\tvar row_color = '';\n\t\t\t//if has item and parent\n\t\t\tif(d.item_code && d.item_parent_item_code){\n\t\t\t\trow_color = '#A9DFBF';\n\t\t\t}\n\t\t\t//if has only item but not parent\n\t\t\tif(d.item_code && !d.item_parent_item_code){\n\t\t\t\trow_color = '#FAD7A0';\n\t\t\t}\n\t\t\t//if has only parent nut no item\n\t\t\tif(!d.item_code && d.item_parent_item_code){\n\t\t\t\trow_color = '#F1948A';\n\t\t\t}\n\t\t\t$(\"div[data-name='\"+d.name+\"']\").find('div.data-row > div.grid-static-col').css({'background-color': row_color});\n\t\t});\n\t\t*/\n\n\t},\n\t\n\t\"create_item_prices_from_parent\": function(frm) {\n\t\treturn frappe.call({\n\t\t\tmethod: \"custom_manufacturing.utils.create_item_prices_from_parent\",\n\t\t\targs: {\n\t\t\t\titem_code: frm.doc.name,\n\t\t\t},\n\t\t\tcallback: function(r) {\n\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\n\t\t\t\t\tfrappe.run_serially([\n\t\t\t\t\t\t() => location.reload(), //frappe.set_route(\"Form\", \"Item\", doc.task_id), //cur_frm.reload_doc(),\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\t\n\t\"item_group\": function(frm) {\n\t\t//ToDo - add custom field 'prefix for item code' to Item Group and load it in New Item on item_group change\n\t\t/*\n\t\tif(frm.doc.item_group == __(\"Darbs\"))\n\t\t{\n\t\t\tfrm.doc.naming_by = __(\"Naming Series\");\n\t\t\t//cur_frm.set_value(\"naming_by\", __(\"Naming Series\"));\n\t\t\tcur_frm.set_value(\"naming_series\", \"D.####\");\n\t\t}\n\t\tif(frm.doc.item_group == __(\"Materi\u0101li\"))\n\t\t{\t\t\t\n\t\t\tfrm.doc.naming_by = __(\"Naming Series\");\n\t\t\tcur_frm.set_value(\"naming_series\", \"M.####\");\n\t\t}\n\t\t*/\n\t},\n\t\"naming_by\": function(frm) {\n\t\tfrm.toggle_display(\"item_code\", frm.doc.naming_by == \"Manually By Item Code\");\n\t\tfrm.toggle_display(\"naming_series\", frm.doc.naming_by == \"Naming Series\");\n\t},\n\t\n\t//function to allow only one parent-item per item group\n\t/* removed as new scheme with child-item was introduced\n\tvalidate: function(frm){\n\tif(frm.doc.is_group_parent_item){\n\tconsole.log('validating...');\n\tnew Promise(resolve => frappe.call({\n\t\ttype:\"GET\",\n\t\tmethod: \"custom_manufacturing.utils.check_is_set_item_group_parent_item\",\n\t\targs: {\n\t\t\t\"item_group\": frm.doc.item_group,\n\t\t\t\"item_code\": frm.doc.item_code\n\t\t},\n\t\tcallback: resolve\n\t})).then(r => {\n\t\tconsole.log(r.message);\n\t\tif(r.message){\n\t\t\tcur_frm.set_value(\"is_group_parent_item\", \"0\");\n\t\t\tfrappe.throw(__(\"Primary Item is already set: \") + r.message[0]['item_group'] + '/ '+r.message[0]['item_name'] + ' (<em>'+r.message[0]['item_code']+'</em>)')\n\t\t}\n\t\t//if(r.message) {\t\t\t\t\t\t\t\t\n\t\t//\t$.each(r.message, function(i, d) {\n\t\t//}\n\t})\n\t}\n\t},\n\t*/\n})\ncur_frm.add_fetch(\"parent_item\", \"item_name\", \"parent_item_name\");",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Customer",
  "modified": "2018-09-12 17:09:28.954259",
  "name": "Customer-Client",
  "script": "frappe.ui.form.on('Customer', {\n\trefresh: function(frm) {\n\t\tcur_frm.remove_custom_button(__(\"Accounting Ledger\"));\n\t\tcur_frm.remove_custom_button(__(\"Accounts Receivable\"));\n\t}\n})",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Stock Entry",
  "modified": "2019-03-20 15:08:36.522256",
  "name": "Stock Entry-Client",
  "script": "frappe.ui.form.on('Stock Entry', {\n\tsetup: function(frm) {\n\t\tfrm.set_query('uom', 'items', function(doc, cdt, cdn) {\n\t\t\tvar item = locals[cdt][cdn];\n\t\t\tif(!item.item_code) {\n\t\t\t\tfrappe.throw(__(\"Please enter Item Code to get UOM\"));\n\t\t\t} else {\n\t\t\t\t\tvar filters = {\n\t\t\t\t\t\t'item_code': item.item_code,\n\t\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tquery : \"custom_manufacturing.utils.get_item_uoms\",\n\t\t\t\t\tfilters: filters\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n})\n\n//set uom_rate if some of fields are changed:\nfrappe.ui.form.on(\"Stock Entry Detail\", {\n\t\"item_code\": function(frm, cdt, cdn) {\n\t\t\t // from default code item_code change will trigger to set uom and stock_uom and conversion_factor (to 1 as uom and stock_uom will be initially set the same)\n\t\t\t// and set uom_basic_rate = amount/qty\n\t\t\tcur_frm.set_item_uom_basic_rate({cdt:cdt, cdn:cdn});\n\t},\n\t\"uom\": function(frm, cdt, cdn) {\n\t\t\t// from default code uom change will trigger to set conversion_factor and set transfer_qty=qty*conversion_factor\n\t\t\t// !!! NB! If basic_rate changed manually and then qty changed then basic_rate will reseted to get_incomin_rate?\n\t\t\t// and set uom_basic_rate = amount/qty\n\t\t\tcur_frm.set_item_uom_basic_rate({cdt:cdt, cdn:cdn});\n\t},\n\t\"qty\": function(frm, cdt, cdn) {\n\t\t\t// from default code qty change will trigger to set transfer_qty=conversion_factor*qty and set basic_rate=get_incoming_rate() \n\t\t\t// !!! NB! If basic_rate changed manually and then qty changed then basic_rate will reseted to get_incomin_rate?\n\t\t\t// and set uom_basic_rate = amount/qty\n\t\t\tcur_frm.set_item_uom_basic_rate({cdt:cdt, cdn:cdn});\n\t},\n\t\"basic_rate\": function(frm, cdt, cdn) {\n\t\t\t// from default code basic_rate change will trigger to calculate amount=transfer_qty*basic_rate\n\t\t\t// and set uom_basic_rate = amount/qty\n\t\t\tcur_frm.set_item_uom_basic_rate({cdt:cdt, cdn:cdn});\n\t},\n\t//customize form:\n\t\"uom_basic_rate\": function(frm, cdt, cdn) {\n\t\t\tcur_frm.set_item_basic_rate_from_uom_basic_rate({cdt:cdt, cdn:cdn});\n\t},\n});\n\n/* OLD:\ncur_frm.set_item_uom_basic_rate = function(opts) {\n\t//console.log(locals);\n\tvar item = locals[opts.cdt][opts.cdn];\n\t//const item = opts.item;\n\tif(item.amount && item.qty){\n\t\tvar uom_basic_rate = flt(item.amount/item.qty);\n\t\t//console.log(uom_rate);\n\t\tconsole.log('Has amount and qty. Calculated uom_basic_rate: ' + uom_basic_rate);\n\t\tfrappe.model.set_value(opts.cdt, opts.cdn, \"uom_basic_rate\", uom_basic_rate); \n\t}else{\n\t\tconsole.log('Has not amount and qty, can not set uom_basic_rate');\n\t}\n}\n*/\n\n//calculate to transactions rate (uom_basic_rate)\n//NB! item.amount = item.transfer_qty * basic_rate\ncur_frm.set_item_uom_basic_rate = function(opts) {\n\t\n\tvar item = locals[opts.cdt][opts.cdn];\n\t\n\tconsole.log('item.idx:');\n\tconsole.log(item.idx);\n\tconsole.log('len:');\n\tconsole.log(cur_frm.doc.items.length);\n\tconsole.log('cur_frm.doc.items[item.idx]:');\n\tconsole.log(cur_frm.doc.items[item.idx]);\n\tvar idx = item.idx-1 //item table is array so index starts with 0\n\t/*\n\tif(cur_frm.doc.items[idx].amount && cur_frm.doc.items[idx].qty){\n\t\tvar uom_basic_rate = flt(cur_frm.doc.items[idx].amount/cur_frm.doc.items[idx].qty, 4);\n\t\tconsole.log('item.amount:' + cur_frm.doc.items[idx].amount);\n\t\tconsole.log('item.qty:' + cur_frm.doc.items[idx].qty);\n\t\tconsole.log('Having amount and qty. Calculated uom_basic_rate: ' + uom_basic_rate);\n\t\t//we have to set just basic_rate value without triggering events (avoiding loop):\n\t\tcur_frm.doc.items[idx].uom_basic_rate = uom_basic_rate;\n\t\tcur_frm.refresh_field(\"items\");\n\t\t//frappe.model.set_value(opts.cdt, opts.cdn, \"uom_basic_rate\", uom_basic_rate); \n\n\t}else{\n\t\tconsole.log('Having not amount and qty, can not set uom_basic_rate');\n\t}\n\t*/\n\tif(cur_frm.doc.items[idx].conversion_factor && cur_frm.doc.items[idx].basic_rate){\n\t\tvar uom_basic_rate = flt(cur_frm.doc.items[idx].conversion_factor * cur_frm.doc.items[idx].basic_rate, 4);\n\t\tconsole.log('item.conversion_factor:' + cur_frm.doc.items[idx].conversion_factor);\n\t\tconsole.log('item.basic_rate:' + cur_frm.doc.items[idx].basic_rate);\n\t\tconsole.log('Having conversion_factor and basic_rate. Calculated uom_basic_rate: ' + uom_basic_rate);\n\t\t//we have to set just basic_rate value without triggering events (avoiding loop):\n\t\tcur_frm.doc.items[idx].uom_basic_rate = uom_basic_rate;\n\t\tcur_frm.refresh_field(\"items\");\n\t\t//frappe.model.set_value(opts.cdt, opts.cdn, \"uom_basic_rate\", uom_basic_rate); \n\n\t}else{\n\t\tconsole.log('Having not amount and qty, can not set uom_basic_rate');\n\t}\n}\n\n//calculate from transactions rate (uom_basic_rate) to stock rate (basic_rate)\ncur_frm.set_item_basic_rate_from_uom_basic_rate = function(opts) {\n\tvar item = locals[opts.cdt][opts.cdn];\n\t//const item = opts.item;\n\tif(item.uom_basic_rate && item.conversion_factor){\n\t\tvar basic_rate = flt(item.uom_basic_rate/item.conversion_factor, 4);\n\t\tconsole.log('item.uom_basic_rate:' + item.uom_basic_rate);\n\t\tconsole.log('item.conversion_factor:' + item.conversion_factor);\n\t\tconsole.log('Having uom_basic_rate and conversion_factor. Calculated basic_rate: ' + basic_rate);\n\t\t//rate have to be set via function using trigger method (frappe.model.set_valuet) since events of rate have to be triggered, for example, to calculate amount, discounts etc.\n\t\tfrappe.model.set_value(opts.cdt, opts.cdn, \"basic_rate\", basic_rate); \n\t}else{\n\t\tconsole.log('Having not basic_rate and conversion_factor, can not set rate');\n\t}\n}\n\n\n\n//uom_basic_rate = amount/qty\n//manual uom_basic_rate: uom_basic_rate=uom_basic_rate\n//basic_rate: uom_basic_rate= timeout and amount/qty\n//uom: ?? notest\u0113t\n//aiztiekot uom_basic_rate:basic_rate= amount/transfer_qty ?\n\n/*\nfrappe.ui.form.on(\"Purchase Invoice Item\", {\n\tbasic_rate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(0.3),\n\t\t\t() => cur_frm.set_item_rate_from_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t]);\n\t},\n\tamount: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\n\t\t\t() => cur_frm.set_item_rate_from_amount({cdt:cdt, cdn:cdn}),\n\t\t]);\n\t},\n});\n*/",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Order",
  "modified": "2019-03-20 15:09:44.312441",
  "name": "Purchase Order-Client",
  "script": "frappe.ui.form.on(\"Purchase Order\", {\n\t//populate parent fields 'warehouse' and 'project' into childtable 'items':\n\tonload: function(frm) {\n\t\tcur_frm.page.sidebar.hide();\n\t\tcur_frm.set_po_warehouse(frm);\n\t},\n\twarehouse: function(frm){\n\t\tcur_frm.set_po_warehouse(frm);\n\t},\n\tproject: function(frm){\n\t\tcur_frm.set_po_project(frm);\n\t},\n\t//show only uoms for items that are defined under Item master card's section 'uoms':\n\tsetup:function(frm) {\n\t\tfrm.set_query('uom', 'items', function(doc, cdt, cdn) {\n\t\t\t\t\tvar item = locals[cdt][cdn];\n\t\t\t\t\tif(!item.item_code) {\n\t\t\t\t\t\tfrappe.throw(__(\"Please enter Item Code to get UOM\"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar filters = {\n\t\t\t\t\t\t\t\t'item_code': item.item_code,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tquery : \"custom_manufacturing.utils.get_item_uoms\",\n\t\t\t\t\t\t\tfilters: filters\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t});\n\t},\n\t//append (setting timeout!!!?? FIX!) for_each_item_set_item_basic_rate to default supplier event (supplier-> price list-> ....)\n\tsupplier: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tcurrency: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tconversion_rate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tbuying_price_list: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tprice_list_currency: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tplc_conversion_rate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n});\n\ncur_frm.set_po_warehouse = function(frm){\n\t//console.log(\"set_po_warehouse\");\n\tif(frm.doc.warehouse_custom){\n\t\tcur_frm.copy_value_in_all_rows(frm.doc, frm.doc.doctype, frm.doc.name, \"items\", \"warehouse\", \"warehouse\");\n\t}\n}\ncur_frm.set_po_project = function(frm){\n\t//console.log(\"set_po_project\");\n\tif(frm.doc.warehouse_custom){\n\t\tcur_frm.copy_value_in_all_rows(frm.doc, frm.doc.doctype, frm.doc.name, \"items\", \"project\", \"project\");\n\t}\n}\n//helper function:\ncur_frm.copy_value_in_all_rows = function(doc, dt, dn, table_fieldname, fieldname, fieldname_in_doc){\n\t\tvar d = locals[dt][dn];\n\t\tif(d[fieldname_in_doc]){\n\t\t\tvar cl = doc[table_fieldname] || [];\n\t\t\tfor(var i = 0; i < cl.length; i++) {\n\t\t\t\tcl[i][fieldname] = d[fieldname_in_doc];\n\t\t\t}\n\t\t}else{\n\t\t\tconsole.log('no fieldname:' + fieldname_in_doc);\n\t\t}\n\t\trefresh_field(table_fieldname);\n}\n\n//controller to override default code (controller classes)\n//item_code example taken from erpnext/public/js/controllers/transaction.js\nerpnext.CustomPurchaseOrderController = erpnext.buying.PurchaseOrderController.extend({\n\titem_code: function(frm, cdt, cdn, from_barcode) {\n\t\tfrm = cur_frm;\n\t\tvar me = this;\n\t\tvar item = frappe.get_doc(cdt, cdn);\n\t\tvar update_stock = 0, show_batch_dialog = 0;\n\n\t\t// clear barcode if setting item (else barcode will take priority)\n\t\tif(!from_barcode) {\n\t\t\titem.barcode = null;\n\t\t}\n\t\tif(item.item_code || item.barcode || item.serial_no) {\n\t\t\tif(!cur_frm.cscript.validate_company_and_party()) {\n\t\t\t\tfrm.fields_dict[\"items\"].grid.grid_rows[item.idx - 1].remove();\n\t\t\t} else {\n\t\t\t\treturn frm.call({\n\t\t\t\t\tmethod: \"erpnext.stock.get_item_details.get_item_details\",\n\t\t\t\t\tchild: item,\n\t\t\t\t\targs: {\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\titem_code: item.item_code,\n\t\t\t\t\t\t\tbarcode: item.barcode,\n\t\t\t\t\t\t\tserial_no: item.serial_no,\n\t\t\t\t\t\t\twarehouse: item.warehouse,\n\t\t\t\t\t\t\tcustomer: frm.doc.customer,\n\t\t\t\t\t\t\tsupplier: frm.doc.supplier,\n\t\t\t\t\t\t\tcurrency: frm.doc.currency,\n\t\t\t\t\t\t\tupdate_stock: update_stock,\n\t\t\t\t\t\t\tconversion_rate: frm.doc.conversion_rate,\n\t\t\t\t\t\t\tprice_list: frm.doc.selling_price_list || frm.doc.buying_price_list,\n\t\t\t\t\t\t\tprice_list_currency: frm.doc.price_list_currency,\n\t\t\t\t\t\t\tplc_conversion_rate: frm.doc.plc_conversion_rate,\n\t\t\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\t\t\torder_type: frm.doc.order_type,\n\t\t\t\t\t\t\tis_pos: cint(frm.doc.is_pos),\n\t\t\t\t\t\t\tis_subcontracted: frm.doc.is_subcontracted,\n\t\t\t\t\t\t\ttransaction_date: frm.doc.transaction_date || frm.doc.posting_date,\n\t\t\t\t\t\t\tignore_pricing_rule: frm.doc.ignore_pricing_rule,\n\t\t\t\t\t\t\tdoctype: frm.doc.doctype,\n\t\t\t\t\t\t\tname: frm.doc.name,\n\t\t\t\t\t\t\tproject: item.project || frm.doc.project,\n\t\t\t\t\t\t\tqty: item.qty || 1,\n\t\t\t\t\t\t\tstock_qty: item.stock_qty,\n\t\t\t\t\t\t\tconversion_factor: item.conversion_factor,\n\t\t\t\t\t\t\tweight_per_unit: item.weight_per_unit,\n\t\t\t\t\t\t\tweight_uom: item.weight_uom,\n\t\t\t\t\t\t\tuom : item.uom,\n\t\t\t\t\t\t\tpos_profile: frm.doc.doctype == 'Sales Invoice' ? frm.doc.pos_profile : '',\n\t\t\t\t\t\t\tcost_center: item.cost_center\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\t\tfrappe.run_serially([\n\t\t\t\t\t\t\t\t() => frm.script_manager.trigger(\"price_list_rate\", cdt, cdn),\n\t\t\t\t\t\t\t\t() => cur_frm.cscript.toggle_conversion_factor(item),\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcur_frm.cscript.toggle_conversion_factor(item),\n\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\tif(show_batch_dialog && !frappe.flags.hide_serial_batch_dialog) {\n\t\t\t\t\t\t\t\t\t\tvar d = locals[cdt][cdn];\n\t\t\t\t\t\t\t\t\t\t$.each(r.message, function(k, v) {\n\t\t\t\t\t\t\t\t\t\t\tif(!d[k]) d[k] = v;\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\terpnext.show_serial_batch_selector(frm, d, (item) => {\n\t\t\t\t\t\t\t\t\t\t\tfrm.script_manager.trigger('qty', item.doctype, item.name);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() => cur_frm.cscript.conversion_factor(frm.doc, cdt, cdn, true),\n\t\t\t\t\t\t\t\t() => frappe.model.set_value(cdt, cdn, 'warehouse', frm.doc.warehouse_custom),\n\t\t\t\t\t\t\t\t() => frappe.model.set_value(cdt, cdn, 'project', frm.doc.project),\n\t\t\t\t\t\t\t\t() => cur_frm.set_item_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n\tuom: function(doc, cdt, cdn) {\n\t\tvar me = this;\n\t\tvar item = frappe.get_doc(cdt, cdn);\n\t\tif(item.item_code && item.uom) {\n\t\t\treturn this.frm.call({\n\t\t\t\tmethod: \"erpnext.stock.get_item_details.get_conversion_factor\",\n\t\t\t\tchild: item,\n\t\t\t\targs: {\n\t\t\t\t\titem_code: item.item_code,\n\t\t\t\t\tuom: item.uom\n\t\t\t\t},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\tfrappe.run_serially([\n\t\t\t\t\t\t\t() => cur_frm.cscript.conversion_factor(me.frm.doc, cdt, cdn),\n\t\t\t\t\t\t\t() => frappe.timeout(0.3),\n\t\t\t\t\t\t\t//() => cur_frm.set_item_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t},\n\trate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => console.log('triggering rate'),\n\t\t\t() => frappe.timeout(0.5),\n\t\t\t() => cur_frm.set_item_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t]);\n\t},\n});\n\n//function to set basic_rate in each item of doctype's item:\ncur_frm.for_each_item_set_item_basic_rate = function() {\n\tcur_frm.doc.items.forEach(function(item) {\n\t\tcur_frm.set_item_basic_rate({\"cdt\": item.doctype, \"cdn\": item.name})\n\t})\n\n}\n\ncur_frm.set_item_rate_from_basic_rate = function(opts) {\n\tvar item = locals[opts.cdt][opts.cdn];\n\tif(item.amount && item.qty){\n\t\tvar rate = flt(item.basic_rate*item.conversion_factor);\n\t\tconsole.log('item.basic_rate:' + item.basic_rate);\n\t\tconsole.log('item.conversion_factor:' + item.conversion_factor);\n\t\tconsole.log('Having basic_rate and conversion_factor. Calculated rate: ' + rate);\n\t\t//rate have to be set via function using trigger method (frappe.model.set_valuet) since events of rate have to be triggered, for example, to calculate amount, discounts etc.\n\t\tfrappe.model.set_value(opts.cdt, opts.cdn, \"rate\", rate); \n\t}else{\n\t\tconsole.log('Having not basic_rate and conversion_factor, can not set rate');\n\t}\n}\n\ncur_frm.set_item_basic_rate = function(opts) {\n\tconsole.log('For buying transactions basic_rate is calculated from \"amount/stock_qty\". But \"Amount = rate*qty\" (for selected uom in transaction)');\n\t\n\tvar item = locals[opts.cdt][opts.cdn];\n\t\n\tconsole.log('item.idx:')\n\tconsole.log(item.idx)\n\tconsole.log('len:')\n\tconsole.log(cur_frm.doc.items.length)\n\tconsole.log('cur_frm.doc.items[item.idx]:')\n\tconsole.log(cur_frm.doc.items[item.idx])\n\tvar idx = item.idx-1 //item table is array so index starts with 0\n\tif(cur_frm.doc.items[idx].amount && cur_frm.doc.items[idx].stock_qty){\n\t\tvar basic_rate = flt(cur_frm.doc.items[idx].amount/cur_frm.doc.items[idx].stock_qty);\n\t\tconsole.log('item.amount:' + cur_frm.doc.items[idx].amount);\n\t\tconsole.log('item.stock_qty:' + cur_frm.doc.items[idx].stock_qty);\n\t\tconsole.log('Having amount and qty. Calculated basic_rate: ' + basic_rate);\n\t\t\n\t\t//we have to set just basic_rate value without triggering events (avoiding loop):\n\t\tcur_frm.doc.items[idx].basic_rate = basic_rate;\n\t\tcur_frm.refresh_field(\"items\");\n\t\t//this would not even set value but trigger events for basic_rate thereby triggering rate events that would trigger basic_rate again (loop!)\n\t\t//frappe.model.set_value(opts.cdt, opts.cdn, \"basic_rate\", basic_rate); \n\t}else{\n\t\tconsole.log('Having not amount and qty, can not set basic_rate');\n\t}\n\t\n\t//if price list is triggered then no values in local locals[opts.cdt][opts.cdn].amount and locals[opts.cdt][opts.cdn].stock_qty (yet?) so cur_frm have to be used instead (?)\n\t/*\n\tif(item.amount && item.qty){\n\t\tvar basic_rate = flt(item.amount/item.stock_qty);\n\t\tconsole.log('item.amount:' + item.amount);\n\t\tconsole.log('item.stock_qty:' + item.stock_qty);\n\t\tconsole.log('Having amount and qty. Calculated basic_rate: ' + basic_rate);\n\t\tfrappe.model.set_value(opts.cdt, opts.cdn, \"basic_rate\", basic_rate); \n\t}else{\n\t\tconsole.log('Having not amount and qty, can not set basic_rate');\n\t}\n\t*/\n}\n//add our controller (that overrides default code controller) to current environment's Script Manager (cur_frm cscript):\n$.extend(cur_frm.cscript, new erpnext.CustomPurchaseOrderController({frm: cur_frm}))\n\nfrappe.ui.form.on(\"Purchase Order Item\", {\n\tbasic_rate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => console.log('triggering basic_rate'),\t\t\t\n\t\t\t() => frappe.timeout(0.3),\n\t\t\t() => cur_frm.set_item_rate_from_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t]);\n\t},\n});\n",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Item Price",
  "modified": "2018-11-07 16:34:00.204434",
  "name": "Item Price-Client",
  "script": "cur_frm.add_fetch(\"item_code\", \"stock_uom\", \"stock_uom\");",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Stock Reconciliation",
  "modified": "2019-03-20 15:10:31.094283",
  "name": "Stock Reconciliation-Client",
  "script": "frappe.ui.form.on(\"Stock Reconciliation\", {\n\tonload: function(frm) {\n\t\tcur_frm.page.sidebar.hide();\n\t},\n\t//show only uoms for items that are defined under Item master card's section 'uoms':\n\tsetup:function(frm) {\n\t\tfrm.set_query('uom', 'items', function(doc, cdt, cdn) {\n\t\t\t\t\tvar item = locals[cdt][cdn];\n\t\t\t\t\tif(!item.item_code) {\n\t\t\t\t\t\tfrappe.throw(__(\"Please enter Item Code to get UOM\"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar filters = {\n\t\t\t\t\t\t\t\t'item_code': item.item_code,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tquery : \"custom_manufacturing.utils.get_item_uoms\",\n\t\t\t\t\t\t\tfilters: filters\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t});\n\t},\n\t//extened function to get/return some extra values for item:\n\tget_items: function(frm) {\n\t\tconsole.log('trying to get items');\n\t\tif (cur_frm.doc.warehouse){\n\t\t\tvar wh = cur_frm.doc.warehouse;\n\t\t}else{\n\t\t\tvar wh = '';\n\t\t}\n\t\tfrappe.prompt({label:\"Warehouse\", fieldtype:\"Link\", options:\"Warehouse\", reqd: 1, default: wh,\n\t\t\t\"get_query\": function() {\n\t\t\t\treturn {\n\t\t\t\t\t\"filters\": {\n\t\t\t\t\t\t\"company\": frm.doc.company,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}},\n\t\t\tfunction(data) {\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod:\"erpnext.stock.doctype.stock_reconciliation.stock_reconciliation.get_items\",\n\t\t\t\t\targs: {\n\t\t\t\t\t\twarehouse: data.warehouse,\n\t\t\t\t\t\tposting_date: frm.doc.posting_date,\n\t\t\t\t\t\tposting_time: frm.doc.posting_time,\n\t\t\t\t\t\tcompany:frm.doc.company\n\t\t\t\t\t},\n\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\tvar items = [];\n\t\t\t\t\t\t//frm.clear_table(\"items\");\n\t\t\t\t\t\tif(r.message){\n\t\t\t\t\t\t\tcur_frm.remove_first_row_if_empty();\n\t\t\t\t\t\t\tfor(var i=0; i< r.message.length; i++) {\n\t\t\t\t\t\t\t\tvar d = frm.add_child(\"items\");\n\t\t\t\t\t\t\t\t$.extend(d, r.message[i]);\n\t\t\t\t\t\t\t\tif(!d.qty) d.qty = 0.00;\n\t\t\t\t\t\t\t\tif(!d.valuation_rate) d.valuation_rate = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tfrappe.msgprint(__(\"No Items for choosen warehouse\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcur_frm.set_value('warehouse', data.warehouse);\n\t\t\t\t\t\t//add set_query to uoms field:\n\n\t\t\t\t\t\tfrm.refresh_field(\"items\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t, __(\"Get Items\"), __(\"Update\"));\n\t},\n\twarehouse: function(frm){\n\t\t//reset wh for each item if parent forms wh is changed:\n\t\tif(cur_frm.doc.items){\n\t\t\tcur_frm.doc.items.forEach(function(item) {\n\t\t\t\tfrappe.model.set_value(item.doctype, item.name, 'warehouse', cur_frm.doc.warehouse, \"Link\");\n\t\t\t})\n\t\t}\n\t\tcur_frm.remove_first_row_if_empty();\n\t}\n\n})\nfrappe.ui.form.on(\"Stock Reconciliation Item\", {\n\t//\n\titem_code: function(frm, cdt, cdn) {\n\t\tif(!cur_frm.doc.warehouse) {\n\t\t\tfrappe.throw(__(\"Please enter Warehouse first\"));\n\t\t} else {\n\t\t\tfrappe.model.set_value(cdt, cdn, 'warehouse', cur_frm.doc.warehouse);\n\t\t}\n\t},\n\t//get extra info after uom change (like conversion factor to stock_uom):\n\tuom: function(doc, cdt, cdn) {\n\t\tcur_frm.set_stock_qty_custom({doc:doc, cdt:cdt, cdn:cdn});\n\t},\n\tqty_in_uom: function(doc, cdt, cdn) {\n\t\tcur_frm.set_stock_qty_custom({doc:doc, cdt:cdt, cdn:cdn});\n\t},\n})\n\ncur_frm.remove_first_row_if_empty = function(opts) {\n\tconsole.log(\"cur_frm.doc.items.length:\" + cur_frm.doc.items.length)\n\tif(cur_frm.doc.items.length == 1){\n\t\tif(!cur_frm.doc.items[0].item_code){\n\t\t\tconsole.log('lets remove first row as it is actually empty');\n\t\t\tcur_frm.get_field(\"items\").grid.grid_rows[0].remove();\n\t\t}\n\t}\n}\ncur_frm.set_stock_qty_custom = function(opts) {\n\tvar d = locals[opts.cdt][opts.cdn];\n\tif(d.uom && d.item_code){\n\t\treturn frappe.call({\n\t\t\tmethod: \"erpnext.stock.doctype.stock_entry.stock_entry.get_uom_details\",\n\t\t\targs: {\n\t\t\t\titem_code: d.item_code,\n\t\t\t\tuom: d.uom,\n\t\t\t\tqty: d.qty_in_uom\n\t\t\t},\n\t\t\tcallback: function(r) {\n\t\t\t\tif(r.message) {\n\t\t\t\t\tconsole.log(r.message);\n\t\t\t\t\t//frappe.model.set_value(cdt, cdn, r.message);\n\t\t\t\t\tfrappe.model.set_value(opts.cdt, opts.cdn, 'conversion_factor',r.message['conversion_factor']);\n\t\t\t\t\tfrappe.model.set_value(opts.cdt, opts.cdn, 'qty',r.message['transfer_qty']);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Invoice",
  "modified": "2019-03-28 16:14:49.464680",
  "name": "Purchase Invoice-Client",
  "script": "cur_frm.update_item_price_for_current_price_list = function(){\n\t//for each selected item get it's information and save in db:\n\tvar update_rates_in_item_prices = function(values){\n\t\tvalues.forEach(function(row) {\n\t\t\tvar item = cur_frm.fields_dict[\"items\"].grid.grid_rows_by_docname[row].doc; //get row's information\n\t\t\tupdate_item_price_for_current_price_list(item);\n\t\t});\n\t};\n\t//set values in db:\n\tvar update_item_price_for_current_price_list = function(item) {\n\t\t//get Item Price for given item in given price list:\n\t\tfrappe.call({\n\t\t\t\"method\": \"frappe.client.get_value\",\n\t\t\targs: {\n\t\t\t\tdoctype: \"Item Price\",\n\t\t\t\tfieldname: [\"name\"],\n\t\t\t\tfilters: {\n\t\t\t\t\tprice_list:[\"=\", cur_frm.doc.buying_price_list || cur_frm.doc.selling_price_list],\n\t\t\t\t\titem_code:[\"=\", item.item_code], \n\t\t\t\t}\n\t\t\t},\n\t\t\tcallback: function (r){\n\t\t\t\t//update with new rate\n\t\t\t\t//NB! Rate in Item Prices is in Stock UOM, so conversion must be done\n\t\t\t\tif(r.message['name']){\n\t\t\t\t\tconsole.log('Will update Item Price');\n\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\"method\": \"frappe.client.set_value\",\n\t\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\t\"doctype\": \"Item Price\",\n\t\t\t\t\t\t\t\"name\": r.message['name'],\n\t\t\t\t\t\t\t\"fieldname\": \"price_list_rate\",\n\t\t\t\t\t\t\t\"value\": flt(item.rate)/flt(item.conversion_factor)\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t};\n\t/*\n\tvar opts = {};\n\topts.doctype = 'Purchase Invoice';\n\topts.source_doctype = 'Purchase Receipt';\n\topts.target = cur_frm;\n\topts.setters = {supplier: cur_frm.doc.supplier || undefined};\n\topts.get_query_filters = {\n\t\t\tdocstatus: 1,\n\t\t\tstatus: [\"not in\", [\"Closed\", \"Completed\"]],\n\t\t\tcompany: me.frm.doc.company,\n\t\t\tis_return: 0\n\t\t};\n\tif(opts.get_query_filters) {\n\t\topts.get_query = function() {\n\t\t\treturn {filters: opts.get_query_filters};\n\t\t}\n\t}\n\t*/\n\t//show customized MultiSelect Dialog:\n\tvar d = new frappe.ui.form.MultiSelectDialogCustomized({\n\t\t\t//doctype: opts.source_doctype,\n\t\t\t//target: opts.target,\n\t\t\t//date_field: opts.date_field || undefined,\n\t\t\t//setters: opts.setters,\n\t\t\t//get_query: opts.get_query,\n\t\t\taction: function(selections, args) {\n\t\t\t\tlet values = selections;\n\t\t\t\tif(values.length === 0){\n\t\t\t\t\tfrappe.msgprint(__(\"Please select {0}\", ['Items']))\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tupdate_rates_in_item_prices(values);\n\t\t\t\td.dialog.hide();\n\t\t\t},\n\t});\n};\n\nfrappe.ui.form.on(\"Purchase Invoice\", {\n\ton_submit: function(frm, cdt, cdn) {\n\t\tcur_frm.update_item_price_for_current_price_list();\n\t},\n\t//populate parent fields 'warehouse' and 'project' into childtable 'items':\n\tonload: function(frm) {\n\t\tcur_frm.page.sidebar.hide();\n\t\tcur_frm.set_pi_warehouse(frm);\n\t},\n\twarehouse: function(frm){\n\t\tcur_frm.set_pi_warehouse(frm);\n\t},\n\tproject: function(frm){\n\t\tcur_frm.set_pi_project(frm);\n\t},\n\t//show only uoms for items that are defined under Item master card's section 'uoms':\n\tsetup:function(frm) {\n\t\tfrm.set_query('uom', 'items', function(doc, cdt, cdn) {\n\t\t\t\t\tvar item = locals[cdt][cdn];\n\t\t\t\t\tif(!item.item_code) {\n\t\t\t\t\t\tfrappe.throw(__(\"Please enter Item Code to get UOM\"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar filters = {\n\t\t\t\t\t\t\t\t'item_code': item.item_code,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tquery : \"custom_manufacturing.utils.get_item_uoms\",\n\t\t\t\t\t\t\tfilters: filters\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t});\n\t},\n\t//append (setting timeout!!!?? FIX!) for_each_item_set_item_basic_rate to default supplier event (supplier-> price list-> ....)\n\tsupplier: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tcurrency: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tconversion_rate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tbuying_price_list: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tprice_list_currency: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tplc_conversion_rate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\n});\n\ncur_frm.set_pi_warehouse = function(frm){\n\t//console.log(\"set_pi_warehouse\");\n\tif(frm.doc.warehouse){\n\t\tcur_frm.copy_value_in_all_rows(frm.doc, frm.doc.doctype, frm.doc.name, \"items\", \"warehouse\");\n\t}\n}\n\ncur_frm.set_pi_project = function(frm){\n\t//console.log(\"set_pi_project\");\n\tif(frm.doc.warehouse_custom){\n\t\tcur_frm.copy_value_in_all_rows(frm.doc, frm.doc.doctype, frm.doc.name, \"items\", \"project\", \"project\");\n\t}\n}\n//helper function:\ncur_frm.copy_value_in_all_rows = function(doc, dt, dn, table_fieldname, fieldname){\n\t\tvar d = locals[dt][dn];\n\t\tif(d[fieldname]){\n\t\t\tvar cl = doc[table_fieldname] || [];\n\t\t\tfor(var i = 0; i < cl.length; i++) {\n\t\t\t\tcl[i][fieldname] = d[fieldname];\n\t\t\t}\n\t\t}else{\n\t\t\tconsole.log('no fieldname:' + fieldname);\n\t\t}\n\t\trefresh_field(table_fieldname);\n}\n\n//controller to override default code (controller classes)\n//item_code example taken from erpnext/public/js/controllers/transaction.js\nerpnext.CustomPurchaseInvoiceController = erpnext.accounts.PurchaseInvoice.extend({\n\titem_code: function(frm, cdt, cdn, from_barcode) {\n\t\tfrm = cur_frm;\n\t\tvar me = this;\n\t\tvar item = frappe.get_doc(cdt, cdn);\n\t\tvar update_stock = 0, show_batch_dialog = 0;\n\n\t\t// clear barcode if setting item (else barcode will take priority)\n\t\tif(!from_barcode) {\n\t\t\titem.barcode = null;\n\t\t}\n\t\tif(item.item_code || item.barcode || item.serial_no) {\n\t\t\tif(!cur_frm.cscript.validate_company_and_party()) {\n\t\t\t\tfrm.fields_dict[\"items\"].grid.grid_rows[item.idx - 1].remove();\n\t\t\t} else {\n\t\t\t\treturn frm.call({\n\t\t\t\t\tmethod: \"erpnext.stock.get_item_details.get_item_details\",\n\t\t\t\t\tchild: item,\n\t\t\t\t\targs: {\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\titem_code: item.item_code,\n\t\t\t\t\t\t\tbarcode: item.barcode,\n\t\t\t\t\t\t\tserial_no: item.serial_no,\n\t\t\t\t\t\t\twarehouse: item.warehouse,\n\t\t\t\t\t\t\tcustomer: frm.doc.customer,\n\t\t\t\t\t\t\tsupplier: frm.doc.supplier,\n\t\t\t\t\t\t\tcurrency: frm.doc.currency,\n\t\t\t\t\t\t\tupdate_stock: update_stock,\n\t\t\t\t\t\t\tconversion_rate: frm.doc.conversion_rate,\n\t\t\t\t\t\t\tprice_list: frm.doc.selling_price_list || frm.doc.buying_price_list,\n\t\t\t\t\t\t\tprice_list_currency: frm.doc.price_list_currency,\n\t\t\t\t\t\t\tplc_conversion_rate: frm.doc.plc_conversion_rate,\n\t\t\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\t\t\torder_type: frm.doc.order_type,\n\t\t\t\t\t\t\tis_pos: cint(frm.doc.is_pos),\n\t\t\t\t\t\t\tis_subcontracted: frm.doc.is_subcontracted,\n\t\t\t\t\t\t\ttransaction_date: frm.doc.transaction_date || frm.doc.posting_date,\n\t\t\t\t\t\t\tignore_pricing_rule: frm.doc.ignore_pricing_rule,\n\t\t\t\t\t\t\tdoctype: frm.doc.doctype,\n\t\t\t\t\t\t\tname: frm.doc.name,\n\t\t\t\t\t\t\tproject: item.project || frm.doc.project,\n\t\t\t\t\t\t\tqty: item.qty || 1,\n\t\t\t\t\t\t\tstock_qty: item.stock_qty,\n\t\t\t\t\t\t\tconversion_factor: item.conversion_factor,\n\t\t\t\t\t\t\tweight_per_unit: item.weight_per_unit,\n\t\t\t\t\t\t\tweight_uom: item.weight_uom,\n\t\t\t\t\t\t\tuom : item.uom,\n\t\t\t\t\t\t\tpos_profile: frm.doc.doctype == 'Sales Invoice' ? frm.doc.pos_profile : '',\n\t\t\t\t\t\t\tcost_center: item.cost_center\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\t\tfrappe.run_serially([\n\t\t\t\t\t\t\t\t() => frm.script_manager.trigger(\"price_list_rate\", cdt, cdn),\n\t\t\t\t\t\t\t\t() => cur_frm.cscript.toggle_conversion_factor(item),\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcur_frm.cscript.toggle_conversion_factor(item),\n\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\tif(show_batch_dialog && !frappe.flags.hide_serial_batch_dialog) {\n\t\t\t\t\t\t\t\t\t\tvar d = locals[cdt][cdn];\n\t\t\t\t\t\t\t\t\t\t$.each(r.message, function(k, v) {\n\t\t\t\t\t\t\t\t\t\t\tif(!d[k]) d[k] = v;\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\terpnext.show_serial_batch_selector(frm, d, (item) => {\n\t\t\t\t\t\t\t\t\t\t\tfrm.script_manager.trigger('qty', item.doctype, item.name);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() => cur_frm.cscript.conversion_factor(frm.doc, cdt, cdn, true),\n\t\t\t\t\t\t\t\t() => frappe.model.set_value(cdt, cdn, 'warehouse', frm.doc.warehouse),\n\t\t\t\t\t\t\t\t() => frappe.model.set_value(cdt, cdn, 'project', frm.doc.project),\n\t\t\t\t\t\t\t\t() => cur_frm.set_item_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n\tuom: function(doc, cdt, cdn) {\n\t\tvar me = this;\n\t\tvar item = frappe.get_doc(cdt, cdn);\n\t\tif(item.item_code && item.uom) {\n\t\t\treturn this.frm.call({\n\t\t\t\tmethod: \"erpnext.stock.get_item_details.get_conversion_factor\",\n\t\t\t\tchild: item,\n\t\t\t\targs: {\n\t\t\t\t\titem_code: item.item_code,\n\t\t\t\t\tuom: item.uom\n\t\t\t\t},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\tfrappe.run_serially([\n\t\t\t\t\t\t\t() => cur_frm.cscript.conversion_factor(me.frm.doc, cdt, cdn),\n\t\t\t\t\t\t\t() => frappe.timeout(0.3),\n\t\t\t\t\t\t\t//() => cur_frm.set_item_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t},\n\trate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => console.log('triggering rate'),\n\t\t\t() => frappe.timeout(0.3),\n\t\t\t() => cur_frm.set_item_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t]);\n\t},\n});\n\n//function to set basic_rate in each item of doctype's item:\ncur_frm.for_each_item_set_item_basic_rate = function() {\n\tcur_frm.doc.items.forEach(function(item) {\n\t\tcur_frm.set_item_basic_rate({\"cdt\": item.doctype, \"cdn\": item.name})\n\t})\n\n}\n\n\ncur_frm.set_item_rate_from_basic_rate = function(opts) {\n\tvar item = locals[opts.cdt][opts.cdn];\n\tif(item.basic_rate && item.conversion_factor){\n\t\tvar rate = flt(item.basic_rate*item.conversion_factor);\n\t\tconsole.log('item.basic_rate:' + item.basic_rate);\n\t\tconsole.log('item.conversion_factor:' + item.conversion_factor);\n\t\tconsole.log('Having basic_rate and conversion_factor. Calculated rate: ' + rate);\n\t\t//rate have to be set via function using trigger method (frappe.model.set_valuet) since events of rate have to be triggered, for example, to calculate amount, discounts etc.\n\t\tfrappe.model.set_value(opts.cdt, opts.cdn, \"rate\", rate); \n\t}else{\n\t\tconsole.log('Having not basic_rate and conversion_factor, can not set rate');\n\t}\n}\n\ncur_frm.set_item_basic_rate = function(opts) {\n\tconsole.log('For buying transactions basic_rate is calculated from \"amount/stock_qty\". But \"Amount = rate*qty\" (for selected uom in transaction)');\n\t\n\tvar item = locals[opts.cdt][opts.cdn];\n\t\n\tconsole.log('item.idx:');\n\tconsole.log(item.idx);\n\tconsole.log('len:');\n\tconsole.log(cur_frm.doc.items.length);\n\tconsole.log('cur_frm.doc.items[item.idx]:');\n\tconsole.log(cur_frm.doc.items[item.idx]);\n\tvar idx = item.idx-1 //item table is array so index starts with 0\n\tif(cur_frm.doc.items[idx].amount && cur_frm.doc.items[idx].stock_qty){\n\t\tvar basic_rate = flt(cur_frm.doc.items[idx].amount/cur_frm.doc.items[idx].stock_qty, 4);\n\t\tconsole.log('item.amount:' + cur_frm.doc.items[idx].amount);\n\t\tconsole.log('item.stock_qty:' + cur_frm.doc.items[idx].stock_qty);\n\t\tconsole.log('Having amount and qty. Calculated basic_rate: ' + basic_rate);\n\t\t\n\t\t//we have to set just basic_rate value without triggering events (avoiding loop):\n\t\tcur_frm.doc.items[idx].basic_rate = basic_rate;\n\t\tcur_frm.refresh_field(\"items\");\n\t\t//this would not even set value but trigger events for basic_rate thereby triggering rate events that would trigger basic_rate again (loop!)\n\t\t//frappe.model.set_value(opts.cdt, opts.cdn, \"basic_rate\", basic_rate); \n\t}else{\n\t\tconsole.log('Having not amount and qty, can not set basic_rate');\n\t}\n\t\n\t//if price list is triggered then no values in local locals[opts.cdt][opts.cdn].amount and locals[opts.cdt][opts.cdn].stock_qty (yet?) so cur_frm have to be used instead (?)\n\t/*\n\tif(item.amount && item.qty){\n\t\tvar basic_rate = flt(item.amount/item.stock_qty);\n\t\tconsole.log('item.amount:' + item.amount);\n\t\tconsole.log('item.stock_qty:' + item.stock_qty);\n\t\tconsole.log('Having amount and qty. Calculated basic_rate: ' + basic_rate);\n\t\tfrappe.model.set_value(opts.cdt, opts.cdn, \"basic_rate\", basic_rate); \n\t}else{\n\t\tconsole.log('Having not amount and qty, can not set basic_rate');\n\t}\n\t*/\n}\n\n//add our controller (that overrides default code controller) to current environment's Script Manager (cur_frm cscript):\n$.extend(cur_frm.cscript, new erpnext.CustomPurchaseInvoiceController({frm: cur_frm}));\n\nfrappe.ui.form.on(\"Purchase Invoice Item\", {\n\tbasic_rate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(0.3),\n\t\t\t() => cur_frm.set_item_rate_from_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t]);\n\t},\n\treset_basic_rate: function(frm, cdt, cdn) {\n\t\tconst item = locals[cdt][cdn];\n\t\tconsole.log(item);\n\t\tconsole.log(frm);\n\t\tif(item.item_code && frm.doc.buying_price_list){\n\t\t\tfrappe.call({\n\t\t\t\t\"method\": \"frappe.client.get_value\",\n\t\t\t\targs: {\n\t\t\t\t\tdoctype: \"Item Price\",\n\t\t\t\t\tfieldname: [\"price_list_rate\"],\n\t\t\t\t\tfilters: {\n\t\t\t\t\t\tprice_list:[\"=\", frm.doc.buying_price_list],\n\t\t\t\t\t\titem_code:[\"=\", item.item_code], \n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcallback: function (r) {\n\t\t\t\t\tconsole.log(r.message);\n\t\t\t\t\tif(r.message){\n\t\t\t\t\t\tfrappe.model.set_value(cdt, cdn, \"basic_rate\", r.message['price_list_rate']); \n\t\t\t\t\t}else{\n\t\t\t\t\t\tfrappe.msgprint(__(\"No Price for Item in Price List.\") + '<br>' + __(\"Item\") + ':'+ item.item_code + '. '+ __('Price List')+ ':' + frm.doc.buying_price_list);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}else{\n\t\t\tfrappe.msgprint(__(\"Please, select Item and Price List\"));\n\t\t}\n\t\t/*\n\t\treturn frappe.db.get_value(\"Item Price\",\n\t\t\t{\"price_list\": price_list, \"item_code\": item_code}, \"price_list_rate\")\n\t\t*/\n\t\t/*\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(0.3),\n\t\t\t() => cur_frm.set_item_rate_from_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t]);\n\t\t*/\n\t},\n\t/* not used, circumvented by new-feature 'formulas in fields':\n\tamount: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\n\t\t\t() => cur_frm.set_item_rate_from_amount({cdt:cdt, cdn:cdn}),\n\t\t]);\n\t},\n\t*/\n});\n/* not used, circumvented by new-feature 'formulas in fields':\ncur_frm.set_item_rate_from_amount = function(opts) {\n\tconsole.log('set_item_rate_from_amount()');\n\tvar item = locals[opts.cdt][opts.cdn];\n\tif(item.amount && item.qty){\n\t\tvar rate = flt(item.amount/item.qty);\t\n\t\tconsole.log('item.amount:' + item.amount);\n\t\tconsole.log('item.qty:' + item.qty);\n\t\tconsole.log('Having amount and qty. Calculated rate: ' + rate);\n\t\t//rate have to be set via function using trigger method (frappe.model.set_valuet) since events of rate have to be triggered, for example, to calculate amount, discounts etc.\n\t\tfrappe.model.set_value(opts.cdt, opts.cdn, \"rate\", rate); \n\t}else{\n\t\tconsole.log('Having not amount and/or qty, can not set rate');\n\t}\n}\n*/\nfrappe.ui.form.MultiSelectDialogCustomized = Class.extend({\n\tinit: function(opts) {\n\t\t/* Options: doctype, target, setters, get_query, action */\n\t\t$.extend(this, opts);\n\t\tvar me = this;\n\t\t\n\t\t/*\n\t\tif(this.doctype!=\"[Select]\") {\n\t\t\tfrappe.model.with_doctype(this.doctype, function(r) {\n\t\t\t\tme.make();\n\t\t\t});\n\t\t} else {\n\t\t\tthis.make();\n\t\t}\n\t\t*/\n\t\tthis.make();\n\t},\n\tmake: function() {\n\t\tlet me = this;\n\n\t\t//this.page_length = 20;\n\t\t//customized: removed all fields except results\n\t\tlet fields = [\n\t\t\t/*{\n\t\t\t\tfieldtype: \"Data\",\n\t\t\t\tlabel: __(\"Search Term\"),\n\t\t\t\tfieldname: \"search_term\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tfieldtype: \"Column Break\"\n\t\t\t}*/\n\t\t];\n\t\tlet count = 0;\n\t\t//if(!this.date_field) {\n\t\t//\tthis.date_field = \"transaction_date\";\n\t\t//}\n\t\t/* //no need for setters:\n\t\tObject.keys(this.setters).forEach(function(setter) {\n\t\t\tfields.push({\n\t\t\t\tfieldtype: me.target.fields_dict[setter].df.fieldtype,\n\t\t\t\tlabel: me.target.fields_dict[setter].df.label,\n\t\t\t\tfieldname: setter,\n\t\t\t\toptions: me.target.fields_dict[setter].df.options,\n\t\t\t\tdefault: me.setters[setter]\n\t\t\t});\n\t\t\tif (count++ < Object.keys(me.setters).length) {\n\t\t\t\tfields.push({fieldtype: \"Column Break\"});\n\t\t\t}\n\t\t});\n\t\t*/\n\t\t\n\t\tfields = fields.concat([\n\t\t\t/*{\n\t\t\t\t\"fieldname\":\"date_range\",\n\t\t\t\t\"label\": __(\"Date Range\"),\n\t\t\t\t\"fieldtype\": \"DateRange\",\n\t\t\t},*/\n\t\t\t{ fieldtype: \"HTML\", fieldname: \"note\", options:\"<span style='color: #8d99a6;font-style: italic;'>\"+__(\"Rates below (both - 'Rate' and 'Price List Rate') are in Transaction UOM. <br> On updating Item Price, they will be recalculated to Stock UOM.\")+\"</span>\" },\n\t\t\t{ fieldtype: \"Section Break\" },\n\t\t\t{ fieldtype: \"HTML\", fieldname: \"results_area\" },\n\t\t\t//{ fieldtype: \"Button\", fieldname: \"make_new\", label: __('Create a new ' + me.doctype) }\n\t\t]);\n\n\t\t/*\n\t\tlet doctype_plural = !this.doctype.endsWith('y') ? this.doctype + 's'\n\t\t\t: this.doctype.slice(0, -1) + 'ies';\n\t\t*/\n\n\t\tthis.dialog = new frappe.ui.Dialog({\n\t\t\t//title: __(\"Select {0}\", [(this.doctype=='[Select]') ? __(\"value\") : __(doctype_plural)]),\n\t\t\ttitle: __(\"Items with changed Price\"),\n\t\t\tfields: fields,\n\t\t\tprimary_action_label: __(\"Update New Price in Price List\"),\n\t\t\tprimary_action: function() {\n\t\t\t\tme.action(me.get_checked_values(), me.args);\n\t\t\t}\n\t\t});\n\n\t\tthis.$parent = $(this.dialog.body);\n\t\tthis.$wrapper = this.dialog.fields_dict.results_area.$wrapper.append(`<div class=\"results\"\n\t\t\tstyle=\"border: 1px solid #d1d8dd; border-radius: 3px; height: 300px; overflow: auto;\"></div>`);\n\t\tthis.$results = this.$wrapper.find('.results');\n\t\t//this.$make_new_btn = this.dialog.fields_dict.make_new.$wrapper;\n\t\t/*\n\t\tthis.$placeholder = $(`<div class=\"multiselect-empty-state\">\n\t\t\t<span class=\"text-center\" style=\"margin-top: -40px;\">\n\t\t\t\t<i class=\"fa fa-2x fa-tags text-extra-muted\"></i>\n\t\t\t\t<p class=\"text-extra-muted\">No ${this.doctype} found</p>\n\t\t\t\t<button class=\"btn btn-default btn-xs text-muted\" data-fieldtype=\"Button\"\n\t\t\t\t\tdata-fieldname=\"make_new\" placeholder=\"\" value=\"\">Make a new ${this.doctype}</button>\n\t\t\t</span>\n\t\t</div>`);\n\t\t*/\n\t\tthis.$placeholder = $(`<div class=\"multiselect-empty-state\">\n\t\t\t\t\t<span class=\"text-center\" style=\"margin-top: -40px;\">\n\t\t\t\t\t\t<i class=\"fa fa-2x fa-tags text-extra-muted\"></i>\n\t\t\t\t\t\t<p class=\"text-extra-muted\">`+ __(\"All Prices the same as in slected Price List\") +`</p>\n\t\t\t\t\t</span>\n\t\t\t\t</div>`);\n\n\t\tthis.args = {};\n\n\t\tthis.bind_events();\n\t\tthis.get_results();\n\t\tthis.dialog.show();\n\t},\n\n\tbind_events: function() {\n\t\tlet me = this;\n\t\tthis.$results.on('click', '.list-item-container', function (e) {\n\t\t\tif (!$(e.target).is(':checkbox') && !$(e.target).is('a')) {\n\t\t\t\t$(this).find(':checkbox').trigger('click');\n\t\t\t}\n\t\t});\n\t\tthis.$results.on('click', '.list-item--head :checkbox', (e) => {\n\t\t\tthis.$results.find('.list-item-container .list-row-check')\n\t\t\t\t.prop(\"checked\", ($(e.target).is(':checked')));\n\t\t});\n\n\t\t/*\n\t\tthis.$parent.find('.input-with-feedback').on('change', (e) => {\n\t\t\tthis.get_results();\n\t\t});\n\n\t\tthis.$parent.find('[data-fieldname=\"date_range\"]').on('blur', (e) => {\n\t\t\tthis.get_results();\n\t\t});\n\n\t\tthis.$parent.find('[data-fieldname=\"search_term\"]').on('input', (e) => {\n\t\t\tvar $this = $(this);\n\t\t\tclearTimeout($this.data('timeout'));\n\t\t\t$this.data('timeout', setTimeout(function() {\n\t\t\t\tme.get_results();\n\t\t\t}, 300));\n\t\t});\n\n\t\tthis.$parent.on('click', '.btn[data-fieldname=\"make_new\"]', (e) => {\n\t\t\tfrappe.route_options = {};\n\t\t\tObject.keys(this.setters).forEach(function(setter) {\n\t\t\t\tfrappe.route_options[setter] = me.dialog.fields_dict[setter].get_value() || undefined;\n\t\t\t});\n\t\t\tfrappe.new_doc(this.doctype, true);\n\t\t});\n\t\t*/\n\t},\n\n\tget_checked_values: function() {\n\t\treturn this.$results.find('.list-item-container').map(function() {\n\t\t\tif ($(this).find('.list-row-check:checkbox:checked').length > 0 ) {\n\t\t\t\t//return $(this).attr('data-item-name');\n\t\t\t\treturn $(this).attr('data-item-row-name');\n\t\t\t}\n\t\t}).get();\n\t},\n\n\tmake_list_row: function(result={}) {\n\t\tvar me = this;\n\t\t// Make a head row by default (if result not passed)\n\t\tlet head = Object.keys(result).length === 0;\n\n\t\tlet contents = ``;\n\t\t//let columns = ([\"name\"].concat(Object.keys(this.setters))).concat(\"Date\");\n\t\tlet columns = [\"item_code\", \"item_name\", \"rate\", \"price_list_rate\", \"difference\"];\n\t\t/*\n\t\tcolumns.forEach(function(column) {\n\t\t\tcontents += `<div class=\"list-item__content ellipsis\">\n\t\t\t\t${\n\t\t\t\t\thead ? `<span class=\"ellipsis\">${__(frappe.model.unscrub(column))}</span>`\n\t\t\t\t\t: (column !== \"name\" ? `<span class=\"ellipsis\">${__(result[column])}</span>`\n\t\t\t\t\t\t: `<a href=\"${\"#Form/\"+ me.doctype + \"/\" + result[column]}\" class=\"list-id ellipsis\">\n\t\t\t\t\t\t\t${__(result[column])}</a>`)\n\t\t\t\t}\n\t\t\t</div>`;\n\t\t})\n\t\t*/\n\t\tcolumns.forEach(function(column) {\n\t\t\tcontents += `<div class=\"list-item__content ellipsis\">\n\t\t\t\t${\n\t\t\t\t\thead ? `<span class=\"ellipsis\">${__(frappe.model.unscrub(column))}</span>` : (column !== \"item_code\" ? `<span class=\"ellipsis\">${__(result[column])}</span>`: `<a href=\"${\"#Form/Item/\" + result[column]}\" class=\"list-id ellipsis\">${__(result[column])}</a>`)\n\t\t\t\t}\n\t\t\t</div>`;\n\t\t})\n\n\t\tlet $row = $(`<div class=\"list-item\">\n\t\t\t<div class=\"list-item__content\" style=\"flex: 0 0 10px;\">\n\t\t\t\t<input type=\"checkbox\" class=\"list-row-check\" ${result.checked ? 'checked' : ''}>\n\t\t\t</div>\n\t\t\t${contents}\n\t\t</div>`);\n\t\n\t\t//row_name is used due to need to later get more information from selected row\n\t\t/*\n\t\thead ? $row.addClass('list-item--head')\n\t\t: $row = $(`<div class=\"list-item-container\" data-item-name=\"${result.name}\"></div>`).append($row);\n\t\t*/\n\t\thead ? $row.addClass('list-item--head')\n\t\t\t: $row = $(`<div class=\"list-item-container\" data-item-row-name=\"${result.row_name}\"></div>`).append($row);\n\n\t\treturn $row;\n\t},\n\n\trender_result_list: function(results, more = 0) {\n\t\tvar me = this;\n\t\tthis.$results.empty();\n\t\t\n\t\tif(results.length === 0) {\n\t\t\t//this.$make_new_btn.addClass('hide');\n\t\t\tthis.$results.append(me.$placeholder);\n\t\t\treturn;\n\t\t}\n\t\t//this.$make_new_btn.removeClass('hide');\n\n\t\tthis.$results.append(this.make_list_row());\n\t\tresults.forEach((result) => {\n\t\t\tme.$results.append(me.make_list_row(result));\n\t\t})\n\t\t/*\n\t\tif (more) {\n\t\t\tlet message = __(\"Only {0} entries shown. Please filter for more specific results.\", [this.page_length]);\n\t\t\tme.$results.append($(`<div class=\"text-muted small\" style=\"text-align: center;\n\t\t\t\tmargin: 10px;\">${message}</div>`));\n\t\t}\n\t\t*/\n\t},\n\n\tget_results: function() {\n\n\t\tlet me = this;\n\t\t\n\t\t/*\n\t\tlet filters = this.get_query ? this.get_query().filters : {};\n\t\tObject.keys(this.setters).forEach(function(setter) {\n\t\t\tfilters[setter] = me.dialog.fields_dict[setter].get_value() || undefined;\n\t\t\tme.args[setter] = filters[setter];\n\t\t});\n\n\t\tlet date_val = this.dialog.fields_dict[\"date_range\"].get_value();\n\t\tif(date_val) {\n\t\t\tfilters[this.date_field] = ['between', date_val];\n\t\t}\n\n\t\tlet args = {\n\t\t\tdoctype: me.doctype,\n\t\t\ttxt: me.dialog.fields_dict[\"search_term\"].get_value(),\n\t\t\tfilters: filters,\n\t\t\tfilter_fields: Object.keys(me.setters), //.concat([me.date_field]),\n\t\t\tpage_length: this.page_length + 1,\n\t\t\tquery: this.get_query ? this.get_query().query : '',\n\t\t\tas_dict: 1\n\t\t}\n\n\t\tfrappe.call({\n\t\t\ttype: \"GET\",\n\t\t\tmethod:'frappe.desk.search.search_widget',\n\t\t\tno_spinner: true,\n\t\t\targs: args,\n\t\t\tcallback: function(r) {\n\t\t\t\tlet results = [], more = 0;\n\t\t\t\tif(r.values.length) {\n\t\t\t\t\tif(r.values.length > me.page_length){\n\t\t\t\t\t\tr.values.pop();\n\t\t\t\t\t\tmore = 1;\n\t\t\t\t\t}\n\t\t\t\t\tr.values.forEach(function(result) {\n\t\t\t\t\t\t//if(me.date_field in result) {\n\t\t\t\t\t\t//\tresult[\"Date\"] = result[me.date_field]\n\t\t\t\t\t\t//}\n\t\t\t\t\t\tresult.checked = 0;\n\t\t\t\t\t\t//result.parsed_date = Date.parse(result[\"Date\"]);\n\t\t\t\t\t\tresults.push(result);\n\t\t\t\t\t});\n\t\t\t\t\tresults.map( (result) => {\n\t\t\t\t\t\t//result[\"Date\"] = frappe.format(result[\"Date\"], {\"fieldtype\":\"Date\"});\n\t\t\t\t\t})\n\n\t\t\t\t\tresults.sort((a, b) => {\n\t\t\t\t\t\t//return a.parsed_date - b.parsed_date;\n\t\t\t\t\t});\n\n\t\t\t\t\t// Preselect oldest entry\n\t\t\t\t\tresults[0].checked = 1\n\t\t\t\t}\n\t\t\t\tconsole.log(\"RESULTS:\");\n\t\t\t\tconsole.log(results);\n\t\t\t\tme.render_result_list(results, more);\n\t\t\t}\n\t\t});\n\t\t*/\n\t\t//as no need for search and another doctype then get results from cur_frm:\n\t\tlet results = [];let result = {}; var more = 0;\n\t\tcur_frm.doc.items.forEach(function(item){\n\t\t\tif(item.rate !== item.price_list_rate){ //take only these with changed price:\n\t\t\t\tresult = {};\n\t\t\t\tresult['row_name'] = item.name;\n\t\t\t\tresult['item_code'] = item.item_code;\n\t\t\t\tresult['item_name'] = item.item_name;\t\t\t\n\t\t\t\tresult['rate'] = flt(item.rate, 4);\n\t\t\t\tresult['price_list_rate'] = flt(item.price_list_rate,4);\n\t\t\t\tresult['difference'] = flt(flt(item.rate) - flt(item.price_list_rate),2);\n\t\t\t\tresult['checked'] = 1;\n\t\t\t\tresults.push(result);\n\t\t\t}\n\t\t});\n\t\tme.render_result_list(results, more);\n\t},\n\n});",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Sales Invoice",
  "modified": "2019-03-20 15:09:08.649609",
  "name": "Sales Invoice-Client",
  "script": "frappe.ui.form.on(\"Sales Invoice\", {\n\tonload: function(frm) {\n\t\tcur_frm.page.sidebar.hide();\n\t\tcur_frm.set_si_warehouse(frm);\n\t},\n\twarehouse: function(frm){\n\t\tcur_frm.set_si_warehouse(frm);\n\t},\n\t//show only uoms for items that are defined under Item master card's section 'uoms':\n\tsetup:function(frm) {\n\t\tfrm.set_query('uom', 'items', function(doc, cdt, cdn) {\n\t\t\t\t\tvar item = locals[cdt][cdn];\n\t\t\t\t\tif(!item.item_code) {\n\t\t\t\t\t\tfrappe.throw(__(\"Please enter Item Code to get UOM\"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar filters = {\n\t\t\t\t\t\t\t\t'item_code': item.item_code,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tquery : \"custom_manufacturing.utils.get_item_uoms\",\n\t\t\t\t\t\t\tfilters: filters\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t});\n\t},\n\tcustomer: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tcurrency: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tconversion_rate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tselling_price_list: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tprice_list_currency: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n\tplc_conversion_rate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\t\t\t\n\t\t\t() => cur_frm.for_each_item_set_item_basic_rate(),\n\t\t]);\n\t},\n});\ncur_frm.set_si_warehouse = function(frm){\n\tconsole.log(\"set_si_warehouse\");\n\tif(frm.doc.warehouse){\n\t\t//frappe.provide(\"erpnext.utils\");\n\t\t//erpnext.utils.copy_value_in_all_rows(frm.doc, frm.doc.doctype, frm.doc.name, \"items\", \"warehouse\");\n\t\tcur_frm.copy_value_in_all_rows(frm.doc, frm.doc.doctype, frm.doc.name, \"items\", \"warehouse\");\n\t}\n}\n\ncur_frm.copy_value_in_all_rows = function(doc, dt, dn, table_fieldname, fieldname){\n\t\tvar d = locals[dt][dn];\n\t\tif(d[fieldname]){\n\t\t\tvar cl = doc[table_fieldname] || [];\n\t\t\tfor(var i = 0; i < cl.length; i++) {\n\t\t\t\t//console.log(i);\n\t\t\t\t//if(!cl[i][fieldname]) \n\t\t\t\tcl[i][fieldname] = d[fieldname];\n\t\t\t\tconsole.log('set:' + cl[i][fieldname]);\n\t\t\t}\n\t\t}else{\n\t\t\tconsole.log('no fieldname:' + fieldname);\n\t\t}\n\t\trefresh_field(table_fieldname);\n}\n//item_code: erpnext/public/js/controllers/transaction.js\n//erpnext.buying.PurchaseOrderController.extend\nerpnext.CustomSalesInvoiceController = erpnext.accounts.SalesInvoiceController.extend({\n\titem_code: function(frm, cdt, cdn, from_barcode) {\n\t\tconsole.log('custom item_code script');\n\t\tconsole.log(\"frm:\" +frm + \"doc:\" + frm.doc + \"cdt:\"+ cdt + \"cdn:\" + cdn);\n\t\t//if(!cur_frm.doc.warehouse) {\n\t\t//\tfrappe.throw(__(\"Please select Warehouse first\"));\n\t\t//}\n\t\tfrm = cur_frm;\n\t\tvar me = this;\n\t\tconsole.log('me:' + me)\n\t\tvar item = frappe.get_doc(cdt, cdn);\n\t\tvar update_stock = 0, show_batch_dialog = 0;\n\n\t\t// clear barcode if setting item (else barcode will take priority)\n\t\tif(!from_barcode) {\n\t\t\titem.barcode = null;\n\t\t}\n\t\tconsole.log('item.stock_qty:');\n\t\tconsole.log(item.stock_qty);\n\t\tif(item.item_code || item.barcode || item.serial_no) {\n\t\t\tif(!cur_frm.cscript.validate_company_and_party()) {\n\t\t\t\tfrm.fields_dict[\"items\"].grid.grid_rows[item.idx - 1].remove();\n\t\t\t} else {\n\t\t\t\treturn frm.call({\n\t\t\t\t\tmethod: \"erpnext.stock.get_item_details.get_item_details\",\n\t\t\t\t\tchild: item,\n\t\t\t\t\targs: {\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\titem_code: item.item_code,\n\t\t\t\t\t\t\tbarcode: item.barcode,\n\t\t\t\t\t\t\tserial_no: item.serial_no,\n\t\t\t\t\t\t\twarehouse: item.warehouse,\n\t\t\t\t\t\t\tcustomer: frm.doc.customer,\n\t\t\t\t\t\t\tsupplier: frm.doc.supplier,\n\t\t\t\t\t\t\tcurrency: frm.doc.currency,\n\t\t\t\t\t\t\tupdate_stock: update_stock,\n\t\t\t\t\t\t\tconversion_rate: frm.doc.conversion_rate,\n\t\t\t\t\t\t\tprice_list: frm.doc.selling_price_list || frm.doc.buying_price_list,\n\t\t\t\t\t\t\tprice_list_currency: frm.doc.price_list_currency,\n\t\t\t\t\t\t\tplc_conversion_rate: frm.doc.plc_conversion_rate,\n\t\t\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\t\t\torder_type: frm.doc.order_type,\n\t\t\t\t\t\t\tis_pos: cint(frm.doc.is_pos),\n\t\t\t\t\t\t\tis_subcontracted: frm.doc.is_subcontracted,\n\t\t\t\t\t\t\ttransaction_date: frm.doc.transaction_date || frm.doc.posting_date,\n\t\t\t\t\t\t\tignore_pricing_rule: frm.doc.ignore_pricing_rule,\n\t\t\t\t\t\t\tdoctype: frm.doc.doctype,\n\t\t\t\t\t\t\tname: frm.doc.name,\n\t\t\t\t\t\t\tproject: item.project || frm.doc.project,\n\t\t\t\t\t\t\tqty: item.qty || 1,\n\t\t\t\t\t\t\tstock_qty: flt(item.stock_qty),\n\t\t\t\t\t\t\tconversion_factor: item.conversion_factor,\n\t\t\t\t\t\t\tweight_per_unit: item.weight_per_unit,\n\t\t\t\t\t\t\tweight_uom: item.weight_uom,\n\t\t\t\t\t\t\tuom : item.uom,\n\t\t\t\t\t\t\tpos_profile: frm.doc.doctype == 'Sales Invoice' ? frm.doc.pos_profile : '',\n\t\t\t\t\t\t\tcost_center: item.cost_center\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\t\tfrappe.run_serially([\n\t\t\t\t\t\t\t\t() => frm.script_manager.trigger(\"price_list_rate\", cdt, cdn),\n\t\t\t\t\t\t\t\t() => cur_frm.cscript.toggle_conversion_factor(item),\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcur_frm.cscript.toggle_conversion_factor(item),\n\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\tif(show_batch_dialog && !frappe.flags.hide_serial_batch_dialog) {\n\t\t\t\t\t\t\t\t\t\tvar d = locals[cdt][cdn];\n\t\t\t\t\t\t\t\t\t\t$.each(r.message, function(k, v) {\n\t\t\t\t\t\t\t\t\t\t\tif(!d[k]) d[k] = v;\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\terpnext.show_serial_batch_selector(frm, d, (item) => {\n\t\t\t\t\t\t\t\t\t\t\tfrm.script_manager.trigger('qty', item.doctype, item.name);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() => cur_frm.cscript.conversion_factor(frm.doc, cdt, cdn, true),\n\t\t\t\t\t\t\t\t() => frappe.model.set_value(cdt, cdn, 'warehouse', frm.doc.warehouse),\n\t\t\t\t\t\t\t\t() => cur_frm.set_item_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n\tuom: function(doc, cdt, cdn) {\n\t\tvar me = this;\n\t\tvar item = frappe.get_doc(cdt, cdn);\n\t\tif(item.item_code && item.uom) {\n\t\t\treturn this.frm.call({\n\t\t\t\tmethod: \"erpnext.stock.get_item_details.get_conversion_factor\",\n\t\t\t\tchild: item,\n\t\t\t\targs: {\n\t\t\t\t\titem_code: item.item_code,\n\t\t\t\t\tuom: item.uom\n\t\t\t\t},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\tfrappe.run_serially([\n\t\t\t\t\t\t\t() => cur_frm.cscript.conversion_factor(me.frm.doc, cdt, cdn),\n\t\t\t\t\t\t\t() => frappe.timeout(0.3),\n\t\t\t\t\t\t\t() => cur_frm.set_item_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t},\n\trate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(0.3),\n\t\t\t() => cur_frm.set_item_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t]);\n\t},\n\tbasic_rate: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(0.3),\n\t\t\t() => cur_frm.set_item_rate_from_basic_rate({cdt:cdt, cdn:cdn}),\n\t\t]);\n\t},\n});\n\n//function to set basic_rate in each item of doctype's item:\ncur_frm.for_each_item_set_item_basic_rate = function() {\n\tcur_frm.doc.items.forEach(function(item) {\n\t\tcur_frm.set_item_basic_rate({\"cdt\": item.doctype, \"cdn\": item.name})\n\t})\n\n}\n\ncur_frm.set_item_rate_from_basic_rate = function(opts) {\n\tvar item = locals[opts.cdt][opts.cdn];\n\t//const item = opts.item;\n\tif(item.amount && item.qty){\n\t\tvar rate = flt(item.basic_rate*item.conversion_factor);\n\t\tconsole.log('item.basic_rate:' + item.basic_rate);\n\t\tconsole.log('item.conversion_factor:' + item.conversion_factor);\n\t\tconsole.log('Having basic_rate and conversion_factor. Calculated rate: ' + rate);\n\t\t//rate have to be set via function using trigger method (frappe.model.set_valuet) since events of rate have to be triggered, for example, to calculate amount, discounts etc.\n\t\tfrappe.model.set_value(opts.cdt, opts.cdn, \"rate\", rate); \n\t}else{\n\t\tconsole.log('Having not basic_rate and conversion_factor, can not set rate');\n\t}\n}\n\ncur_frm.set_item_basic_rate = function(opts) {\n\tconsole.log('For selling transactions basic_rate should be calculated from \"amount/stock_qty\". But \"Amount = rate*qty\" (for selected uom in transaction)');\n\t\n\tvar item = locals[opts.cdt][opts.cdn];\n\t\n\tconsole.log('item.idx:');\n\tconsole.log(item.idx);\n\tconsole.log('len:');\n\tconsole.log(cur_frm.doc.items.length);\n\tconsole.log('cur_frm.doc.items[item.idx]:');\n\tconsole.log(cur_frm.doc.items[item.idx]);\n\tvar idx = item.idx-1 //item table is array so index starts with 0\n\tif(cur_frm.doc.items[idx].amount && cur_frm.doc.items[idx].stock_qty){\n\t\tvar basic_rate = flt(cur_frm.doc.items[idx].amount/cur_frm.doc.items[idx].stock_qty, 4);\n\t\tconsole.log('item.amount:' + cur_frm.doc.items[idx].amount);\n\t\tconsole.log('item.stock_qty:' + cur_frm.doc.items[idx].stock_qty);\n\t\tconsole.log('Having amount and qty. Calculated basic_rate: ' + basic_rate);\n\t\t\n\t\t//we have to set just basic_rate value without triggering events (avoiding loop):\n\t\tcur_frm.doc.items[idx].basic_rate = basic_rate;\n\t\tcur_frm.refresh_field(\"items\");\n\t\t//this would not even set value but trigger events for basic_rate thereby triggering rate events that would trigger basic_rate again (loop!)\n\t\t//frappe.model.set_value(opts.cdt, opts.cdn, \"basic_rate\", basic_rate); \n\t}else{\n\t\tconsole.log('Having not amount and qty, can not set basic_rate');\n\t}\n\t\n\t/* OLD:\n\tvar item = locals[opts.cdt][opts.cdn];\n\t//const item = opts.item;\n\tif(item.amount && item.qty){\n\t\tvar basic_rate = flt(item.amount/item.stock_qty);\n\t\tconsole.log('item.amount:' + item.amount);\n\t\tconsole.log('item.stock_qty:' + item.stock_qty);\n\t\tconsole.log('Having amount and qty. Calculated basic_rate: ' + basic_rate);\n\t\tfrappe.model.set_value(opts.cdt, opts.cdn, \"basic_rate\", basic_rate); \n\t}else{\n\t\tconsole.log('Having not amount and qty, can not set basic_rate');\n\t}\n\t*/\n}\n\n//$.extend(cur_frm.cscript, new erpnext.custom_po.PurchaseOrderCustomController({frm: cur_frm}));\n$.extend(cur_frm.cscript, new erpnext.CustomSalesInvoiceController({frm: cur_frm}))\n\nfrappe.ui.form.on(\"Sales Invoice\", {\n\t/*item_code: function(frm, cdt, cdn) {\n\t\tif(frm.doc.warehouse){\n\t\t\tfrappe.model.set_value(cdt, cdn, 'warehouse', frm.doc.warehouse);\n\t\t}\t\n\t},*/\n\t\n});\n\n\n",
  "script_type": "Client"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Material Request",
  "modified": "2019-03-20 15:10:02.042776",
  "name": "Material Request-Client",
  "script": "frappe.ui.form.on(\"Material Request\", {\n\tonload: function(frm) {\n\t\tcur_frm.page.sidebar.hide();\n\t\tcur_frm.set_mr_warehouse(frm);\n\t},\n\twarehouse: function(frm){\n\t\tcur_frm.set_mr_warehouse(frm);\n\t},\n\tproject: function(frm){\n\t\tcur_frm.set_mr_project(frm);\n\t},\n\t//show only uoms for items that are defined under Item master card's section 'uoms':\n\tsetup:function(frm) {\n\t\tfrm.set_query('uom', 'items', function(doc, cdt, cdn) {\n\t\t\t\t\tvar item = locals[cdt][cdn];\n\t\t\t\t\tif(!item.item_code) {\n\t\t\t\t\t\tfrappe.throw(__(\"Please enter Item Code to get UOM\"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar filters = {\n\t\t\t\t\t\t\t\t'item_code': item.item_code,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tquery : \"custom_manufacturing.utils.get_item_uoms\",\n\t\t\t\t\t\t\tfilters: filters\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t});\n\t},\n});\n\ncur_frm.set_mr_warehouse = function(frm){\n\tconsole.log(\"set_mr_warehouse\");\n\tif(frm.doc.warehouse){\n\t\t//frappe.provide(\"erpnext.utils\");\n\t\t//erpnext.utils.copy_value_in_all_rows(frm.doc, frm.doc.doctype, frm.doc.name, \"items\", \"warehouse\");\n\t\tcur_frm.copy_value_in_all_rows(frm.doc, frm.doc.doctype, frm.doc.name, \"items\", \"warehouse\");\n\t}\n}\n\ncur_frm.set_mr_project = function(frm){\n\tconsole.log(\"set_mr_project\");\n\tif(frm.doc.warehouse_custom){\n\t\tcur_frm.copy_value_in_all_rows(frm.doc, frm.doc.doctype, frm.doc.name, \"items\", \"project\", \"project\");\n\t}\n}\n\ncur_frm.copy_value_in_all_rows = function(doc, dt, dn, table_fieldname, fieldname){\n\t\tvar d = locals[dt][dn];\n\t\tif(d[fieldname]){\n\t\t\tvar cl = doc[table_fieldname] || [];\n\t\t\tfor(var i = 0; i < cl.length; i++) {\n\t\t\t\t//console.log(i);\n\t\t\t\t//if(!cl[i][fieldname]) \n\t\t\t\tcl[i][fieldname] = d[fieldname];\n\t\t\t\tconsole.log('set:' + cl[i][fieldname]);\n\t\t\t}\n\t\t}else{\n\t\t\tconsole.log('no fieldname:' + fieldname);\n\t\t}\n\t\trefresh_field(table_fieldname);\n}\n//frappe.ui.form.off(\"Purchase Order Item\", 'item_code');\n\n/*\nfrappe.ui.form.on(\"Purchase Order Item\", {\n\titem_code: function(frm, current_doctype, current_doctname) {\n\t\tconsole.log(\"FRM:\" +frm + \"current_doctype:\"+ current_doctype + \"current_doctname:\" + current_doctname);\n\t}\n})\n*/\n//frappe.provide(\"erpnext.custom_po\");\n\n\n//item_code: erpnext/public/js/controllers/transaction.js\n//erpnext.buying.PurchaseOrderController.extend\nerpnext.CustomMaterialRequestController = erpnext.buying.MaterialRequestController.extend({\n\titem_code: function(frm, cdt, cdn, from_barcode) {\n\t\tconsole.log('custom item_code script');\n\t\tconsole.log(\"frm:\" +frm + \"doc:\" + frm.doc + \"cdt:\"+ cdt + \"cdn:\" + cdn);\n\t\tfrm = cur_frm;\n\t\tvar me = this;\n\t\tconsole.log('me:' + me)\n\t\tvar item = frappe.get_doc(cdt, cdn);\n\t\tvar update_stock = 0, show_batch_dialog = 0;\n\n\t\t// clear barcode if setting item (else barcode will take priority)\n\t\tif(!from_barcode) {\n\t\t\titem.barcode = null;\n\t\t}\n\t\tif(item.item_code || item.barcode || item.serial_no) {\n\t\t\tif(!cur_frm.cscript.validate_company_and_party()) {\n\t\t\t\tfrm.fields_dict[\"items\"].grid.grid_rows[item.idx - 1].remove();\n\t\t\t} else {\n\t\t\t\treturn frm.call({\n\t\t\t\t\tmethod: \"erpnext.stock.get_item_details.get_item_details\",\n\t\t\t\t\tchild: item,\n\t\t\t\t\targs: {\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\titem_code: item.item_code,\n\t\t\t\t\t\t\tbarcode: item.barcode,\n\t\t\t\t\t\t\tserial_no: item.serial_no,\n\t\t\t\t\t\t\twarehouse: item.warehouse,\n\t\t\t\t\t\t\tcustomer: frm.doc.customer,\n\t\t\t\t\t\t\tsupplier: frm.doc.supplier,\n\t\t\t\t\t\t\tcurrency: frm.doc.currency,\n\t\t\t\t\t\t\tupdate_stock: update_stock,\n\t\t\t\t\t\t\tconversion_rate: frm.doc.conversion_rate,\n\t\t\t\t\t\t\tprice_list: frm.doc.selling_price_list || frm.doc.buying_price_list,\n\t\t\t\t\t\t\tprice_list_currency: frm.doc.price_list_currency,\n\t\t\t\t\t\t\tplc_conversion_rate: frm.doc.plc_conversion_rate,\n\t\t\t\t\t\t\tcompany: frm.doc.company,\n\t\t\t\t\t\t\torder_type: frm.doc.order_type,\n\t\t\t\t\t\t\tis_pos: cint(frm.doc.is_pos),\n\t\t\t\t\t\t\tis_subcontracted: frm.doc.is_subcontracted,\n\t\t\t\t\t\t\ttransaction_date: frm.doc.transaction_date || frm.doc.posting_date,\n\t\t\t\t\t\t\tignore_pricing_rule: frm.doc.ignore_pricing_rule,\n\t\t\t\t\t\t\tdoctype: frm.doc.doctype,\n\t\t\t\t\t\t\tname: frm.doc.name,\n\t\t\t\t\t\t\tproject: item.project || frm.doc.project,\n\t\t\t\t\t\t\tqty: item.qty || 1,\n\t\t\t\t\t\t\tstock_qty: item.stock_qty,\n\t\t\t\t\t\t\tconversion_factor: item.conversion_factor,\n\t\t\t\t\t\t\tweight_per_unit: item.weight_per_unit,\n\t\t\t\t\t\t\tweight_uom: item.weight_uom,\n\t\t\t\t\t\t\tuom : item.uom,\n\t\t\t\t\t\t\tpos_profile: frm.doc.doctype == 'Sales Invoice' ? frm.doc.pos_profile : '',\n\t\t\t\t\t\t\tcost_center: item.cost_center\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\t\tfrappe.run_serially([\n\t\t\t\t\t\t\t\t() => frm.script_manager.trigger(\"price_list_rate\", cdt, cdn),\n\t\t\t\t\t\t\t\t() => cur_frm.cscript.toggle_conversion_factor(item),\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcur_frm.cscript.toggle_conversion_factor(item),\n\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\tif(show_batch_dialog && !frappe.flags.hide_serial_batch_dialog) {\n\t\t\t\t\t\t\t\t\t\tvar d = locals[cdt][cdn];\n\t\t\t\t\t\t\t\t\t\t$.each(r.message, function(k, v) {\n\t\t\t\t\t\t\t\t\t\t\tif(!d[k]) d[k] = v;\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\terpnext.show_serial_batch_selector(frm, d, (item) => {\n\t\t\t\t\t\t\t\t\t\t\tfrm.script_manager.trigger('qty', item.doctype, item.name);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() => cur_frm.cscript.conversion_factor(frm.doc, cdt, cdn, true),\n\t\t\t\t\t\t\t\t() => frappe.model.set_value(cdt, cdn, 'warehouse', frm.doc.warehouse),\n\t\t\t\t\t\t\t\t() => frappe.model.set_value(cdt, cdn, 'project', frm.doc.project),\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n\tsome_custom_function: function(){\n\t\tconsole.log('inside some_custom_function');\n\t},\n\tuom: function(doc, cdt, cdn) {\n\t\tvar me = this;\n\t\tvar item = frappe.get_doc(cdt, cdn);\n\t\tif(item.item_code && item.uom) {\n\t\t\treturn this.frm.call({\n\t\t\t\tmethod: \"erpnext.stock.get_item_details.get_conversion_factor\",\n\t\t\t\tchild: item,\n\t\t\t\targs: {\n\t\t\t\t\titem_code: item.item_code,\n\t\t\t\t\tuom: item.uom\n\t\t\t\t},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\tfrappe.run_serially([\n\t\t\t\t\t\t\t() => cur_frm.cscript.conversion_factor(me.frm.doc, cdt, cdn),\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t},\n\n});\n\n//$.extend(cur_frm.cscript, new erpnext.custom_po.PurchaseOrderCustomController({frm: cur_frm}));\n$.extend(cur_frm.cscript, new erpnext.CustomMaterialRequestController({frm: cur_frm}))\n",
  "script_type": "Client"
 }
]